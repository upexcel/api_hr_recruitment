{"version":3,"sources":["../../src/controllers/fetchEmail.js"],"names":["_","FetchController","fetch","req","res","next","params","page","tag_id","limit","body","type","keyword","selected","default_id","is_attach","_db","Tag","findAll","where","then","default_tag","fetchEmail","email","data","message","handleSuccessResponse","status","count","length","catch","handleErrorResponse","bind","assignTag","mongo_id","findOne","id","findOneAndUpdate","email_timestamp","Date","getTime","exec","err","Error","countEmail","findcount","assignMultiple","changeUnreadStatus","checkBody","getValidationResult","emailLog","email_status","response","deleteTag","deleteEmail","result","toLowerCase","find","_id","update","unread","read_email_time","read_by_user","user","error","mailAttachment","findByTagId","fetchById","getCount","sendToMany","subject","emails","sendToSelectedTag","fetchByButton","emailLogs","app_get_candidate","registration_id","logs","sort","skip","parseInt","searchLogs","emailStatus","checkEmailStatus","fetchByDates","findEmailByDates","days","console","log","sendToNotReplied","sendBySelection","insert_note","update_note","cron_status","archiveEmails","archived","markAsUnread","controller"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,C;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAGaC,e,WAAAA,e;;;;;;;;;;;;;;4MAETC,K,GAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,8BACMF,IAAIG,MADV;AAAA,gBAClBC,IADkB,eAClBA,IADkB;AAAA,gBACZC,MADY,eACZA,MADY;AAAA,gBACJC,KADI,eACJA,KADI;AAAA,4BAEiCN,IAAIO,IAFrC;AAAA,gBAElBC,IAFkB,aAElBA,IAFkB;AAAA,gBAEZC,OAFY,aAEZA,OAFY;AAAA,gBAEHC,QAFG,aAEHA,QAFG;AAAA,gBAEOC,UAFP,aAEOA,UAFP;AAAA,gBAEmBC,SAFnB,aAEmBA,SAFnB;;AAGxB,kBAAKC,GAAL,CAASC,GAAT,CAAaC,OAAb,CAAqB,EAAEC,OAAO,EAAER,MAAM,SAAR,EAAT,EAArB,EACKS,IADL,CACU,UAACC,WAAD,EAAiB;AACnB,uCAAcC,UAAd,CAAyBf,IAAzB,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CE,IAA9C,EAAoDC,OAApD,EAA6DC,QAA7D,EAAuEC,UAAvE,EAAmFO,WAAnF,EAAgGlB,IAAIoB,KAApG,EAA2GR,SAA3G,EACKK,IADL,CACU,UAACI,IAAD,EAAOC,OAAP,EAAmB;AACrB,0BAAKC,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AACvCmB,8BAAMA,IADiC;AAEvCG,gCAAQ,CAF+B;AAGvCC,+BAAOzB,IAAIyB,KAH4B;AAIvCH,iCAAUD,KAAKK,MAAN,GAAgB,SAAhB,GAA4B;AAJE,qBAA3C;AAMH,iBARL,EASKC,KATL,CASW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CATX;AAUH,aAZL,EAaK0B,KAbL,CAaW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAbX;AAcH,S,QAED6B,S,GAAY,UAAC9B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,+BACDF,IAAIG,MADH;AAAA,gBACtBE,MADsB,gBACtBA,MADsB;AAAA,gBACd0B,QADc,gBACdA,QADc;;AAE5B,kBAAKlB,GAAL,CAASC,GAAT,CAAakB,OAAb,CAAqB,EAAEhB,OAAO,EAAEiB,IAAI5B,MAAN,EAAT,EAArB,EACKY,IADL,CACU,UAACI,IAAD,EAAU;AACZ,oBAAIA,KAAKY,EAAT,EAAa;AACTjC,wBAAIoB,KAAJ,CAAUc,gBAAV,CAA2B,EAAE,OAAOH,QAAT,EAA3B,EAAgD,EAAE,aAAa,EAAE,UAAU1B,MAAZ,EAAf,EAAqC8B,iBAAiB,IAAIC,IAAJ,GAAWC,OAAX,EAAtD,EAAhD,EAA8HC,IAA9H,CAAmI,UAACC,GAAD,EAAMlB,IAAN,EAAe;AAC9I,4BAAIkB,GAAJ,EAAS;AACLrC,iCAAK,IAAIsC,KAAJ,CAAUD,GAAV,CAAL;AACH,yBAFD,MAEO;AACH,kCAAKhB,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AACvCmB,sCAAMA,IADiC;AAEvCG,wCAAQ,CAF+B;AAGvCF,yCAAS;AAH8B,6BAA3C;AAKH;AACJ,qBAVD;AAWH,iBAZD,MAYO;AACHpB,yBAAK,IAAIsC,KAAJ,CAAU,gBAAV,CAAL;AACH;AACJ,aAjBL,EAkBKb,KAlBL,CAkBW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAlBX;AAmBH,S,QAEDwC,U,GAAa,UAACzC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7B,mCAAcwC,SAAd,CAAwB1C,IAAIoB,KAA5B,EACKH,IADL,CACU,UAACI,IAAD,EAAU;AAAE,sBAAKE,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CmB,IAA3C;AAAkD,aADxE,EAEKM,KAFL,CAEW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAFX;AAGH,S,QAED0C,c,GAAiB,UAAC3C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,gBAAIc,cAAJ;AACA,mCAAa4B,kBAAb,CAAgC5C,IAAI6C,SAApC,EAA+C7C,IAAIO,IAAnD,EAAyDP,IAAI8C,mBAAJ,EAAzD,EACK7B,IADL,CACU,YAAM;AAAA,oBACFZ,MADE,GACSL,IAAIG,MADb,CACFE,MADE;;AAER,uCAAcsC,cAAd,CAA6BtC,MAA7B,EAAqCL,IAAIO,IAAzC,EAA+CP,IAAIoB,KAAnD,EACKH,IADL,CACU,UAACI,IAAD,EAAU;AACZ,wCAAK0B,QAAL,CAAc/C,GAAd,EAAmBqB,KAAK2B,YAAxB,EACK/B,IADL,CACU,UAACgC,QAAD,EAAc;AAChB,8BAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CmB,IAA3C;AACH,qBAHL;AAIH,iBANL;AAOH,aAVL,EAWKM,KAXL,CAWW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAXX;AAYH,S,QAGDiD,S,GAAY,UAAClD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5B,mCAAaiD,WAAb,CAAyBnD,IAAI6C,SAA7B,EAAwC7C,IAAIO,IAA5C,EAAkDP,IAAI8C,mBAAJ,EAAlD,EACK7B,IADL,CACU,YAAM;AACR,uCAAciC,SAAd,CAAwBlD,IAAIG,MAAJ,CAAWE,MAAnC,EAA2CL,IAAIO,IAAJ,CAASwB,QAApD,EAA8D/B,IAAIoB,KAAlE,EACKH,IADL,CACU,UAACmC,MAAD,EAAY;AACd,0BAAK7B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CkD,MAA3C;AACH,iBAHL,EAIKzB,KAJL,CAIW,MAAKC,mBAAL,CAAyB,IAAzB,EAA+B3B,GAA/B,CAJX;AAKH,aAPL,EAQK0B,KARL,CAQW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CARX;AASH,S,QAED2C,kB,GAAqB,UAAC5C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,gBAC/B6B,QAD+B,GAClB/B,IAAIG,MADc,CAC/B4B,QAD+B;;AAErC,gBAAIP,SAAS,CAACxB,IAAIG,MAAJ,CAAWqB,MAAX,GAAoB,EAArB,EAAyB6B,WAAzB,OAA2C,MAAxD;AACArD,gBAAIoB,KAAJ,CAAUkC,IAAV,CAAe,EAAEC,KAAKxB,QAAP,EAAf,EAAkC,UAACQ,GAAD,EAAS;AACvC,oBAAIA,GAAJ,EAAS;AACLrC,yBAAK,IAAIsC,KAAJ,CAAUD,GAAV,CAAL;AACH,iBAFD,MAEO,IAAIf,UAAU,KAAd,EAAqB;AACxBxB,wBAAIoB,KAAJ,CAAUoC,MAAV,CAAiB,EAAED,KAAKxB,QAAP,EAAjB,EAAoC,EAAE0B,QAAQjC,MAAV,EAAkBkC,iBAAiB,IAAItB,IAAJ,EAAnC,EAA+CuB,cAAc3D,IAAI4D,IAAJ,CAASxC,KAAtE,EAApC,EAAmH,UAACyC,KAAD,EAAW;AAC1H,4BAAIA,KAAJ,EAAW;AACP3D,iCAAK,IAAIsC,KAAJ,CAAUD,GAAV,CAAL;AACH,yBAFD,MAEO;AACH,kCAAKhB,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEsB,QAAQ,CAAV,EAAaF,SAAS,kDAAkDtB,IAAIG,MAAJ,CAAWqB,MAAnF,EAA3C;AACH;AACJ,qBAND;AAOH,iBARM,MAQA;AACH,0BAAKD,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEsB,QAAQ,CAAV,EAAaF,SAAS,sFAAtB,EAA3C;AACH;AACJ,aAdD;AAeH,S,QAED6B,W,GAAc,UAACnD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,mCAAaiD,WAAb,CAAyBnD,IAAI6C,SAA7B,EAAwC7C,IAAIO,IAA5C,EAAkDP,IAAI8C,mBAAJ,EAAlD,EACK7B,IADL,CACU,YAAM;AACR,uCAAckC,WAAd,CAA0BnD,IAAIG,MAAJ,CAAWE,MAArC,EAA6CL,IAAIO,IAAJ,CAASwB,QAAtD,EAAgE/B,IAAIoB,KAApE,EACKH,IADL,CACU,UAACmC,MAAD,EAAY;AAAE,0BAAK7B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CkD,MAA3C;AAAoD,iBAD5E,EAEKzB,KAFL,CAEW,MAAKC,mBAAL,CAAyB,IAAzB,EAA+B3B,GAA/B,CAFX;AAGH,aALL,EAMK0B,KANL,CAMW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CANX;AAOH,S,QAED6D,c,GAAiB,UAAC9D,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,mCAAc4D,cAAd,CAA6B9D,IAAIG,MAAJ,CAAW4B,QAAxC,EAAkD/B,IAAIoB,KAAtD,EACKH,IADL,CACU,UAACmC,MAAD,EAAY;AAAE,sBAAK7B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CkD,MAA3C;AAAoD,aAD5E,EAEKzB,KAFL,CAEW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAFX;AAGH,S,QAGD8D,W,GAAc,UAAC/D,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBG,MAAjB,EAA4B;AAAA,6BACmBL,IAAIO,IADvB;AAAA,gBAChCC,IADgC,cAChCA,IADgC;AAAA,gBAC1BC,OAD0B,cAC1BA,OAD0B;AAAA,gBACjBC,QADiB,cACjBA,QADiB;AAAA,gBACPC,UADO,cACPA,UADO;AAAA,gBACKC,SADL,cACKA,SADL;;AAEtC,mCAAcoD,SAAd,CAAwBxD,IAAxB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,UAAjD,EAA6DN,MAA7D,EAAqEO,SAArE,EACKK,IADL,CACU,UAACI,IAAD,EAAU;AACZ,sBAAK4C,QAAL,CAAcjE,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BmB,IAA9B;AACH,aAHL;AAIH,S,QAED6C,U,GAAa,UAAClE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,6BACeF,IAAIO,IADnB;AAAA,gBACvB4D,OADuB,cACvBA,OADuB;AAAA,gBACd5D,IADc,cACdA,IADc;AAAA,gBACRF,MADQ,cACRA,MADQ;AAAA,gBACAM,UADA,cACAA,UADA;;AAE7B,mCAAcuD,UAAd,CAAyBlE,GAAzB,EAA8BA,IAAIO,IAAJ,CAAS6D,MAAvC,EAA+CD,OAA/C,EAAwD5D,IAAxD,EAA8DF,MAA9D,EAAsEM,UAAtE,EAAkFX,IAAIoB,KAAtF,EACKH,IADL,CACU,UAACgC,QAAD,EAAc;AAChB,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C;AACH,aAHL,EAIKtB,KAJL,CAIW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAJX;AAKH,S,QAEDoE,iB,GAAoB,UAACrE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,mCAAcmE,iBAAd,CAAgCrE,GAAhC,EAAqCA,IAAIO,IAAJ,CAASF,MAA9C,EAAsDL,IAAIoB,KAA1D,EACKH,IADL,CACU,UAACmC,MAAD,EAAY;AAAE,sBAAK7B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CkD,MAA3C;AAAoD,aAD5E,EAEKzB,KAFL,CAEW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAFX;AAGH,S,QAEDqE,a,GAAgB,UAACtE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChC,4BAAMiB,UAAN,CAAiBnB,IAAIoB,KAArB,EAA4BpB,IAAIuE,SAAhC,EAA2C,SAA3C,EACKtD,IADL,CACU,UAACI,IAAD,EAAU;AAAE,sBAAKE,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEsB,QAAQ,CAAV,EAAaF,SAAS,SAAtB,EAA3C;AAA+E,aADrG,EAEKK,KAFL,CAEW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAFX;AAGH,S,QAEDuE,iB,GAAoB,UAACxE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,mCAAcsE,iBAAd,CAAgCxE,IAAIoB,KAApC,EAA2CpB,IAAIO,IAAJ,CAASkE,eAApD,EACKxD,IADL,CACU,UAACmC,MAAD,EAAY;AAAE,sBAAK7B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAE2D,OAAO,CAAT,EAAYvC,SAAS,EAArB,EAAyBD,MAAM+B,MAA/B,EAA3C;AAAqF,aAD7G,EAEKzB,KAFL,CAEW,UAACY,GAAD,EAAS;AAAE,sBAAKhB,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CqC,GAA3C;AAAiD,aAFvE;AAGH,S,QAEDmC,I,GAAO,UAAC1E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,+BACDF,IAAIG,MADH;AAAA,gBACjBC,IADiB,gBACjBA,IADiB;AAAA,gBACXE,KADW,gBACXA,KADW;;AAEvBN,gBAAIuE,SAAJ,CAAcjB,IAAd,GAAqBqB,IAArB,CAA0B,EAAEpB,KAAK,CAAC,CAAR,EAA1B,EAAuCqB,IAAvC,CAA4C,CAACxE,OAAO,CAAR,IAAayE,SAASvE,KAAT,CAAzD,EAA0EA,KAA1E,CAAgFuE,SAASvE,KAAT,CAAhF,EAAiGgC,IAAjG,GACKrB,IADL,CACU,UAACmC,MAAD,EAAY;AACdpD,oBAAIuE,SAAJ,CAAc9C,KAAd,GAAsBa,IAAtB,GACKrB,IADL,CACU,UAACQ,KAAD,EAAW;AACb,0BAAKF,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAE2D,OAAO,CAAT,EAAYvC,SAAS,EAArB,EAAyBD,MAAM+B,MAA/B,EAAuC3B,OAAOA,KAA9C,EAA3C;AACH,iBAHL;AAIH,aANL,EAOKE,KAPL,CAOW,UAACY,GAAD,EAAS;AAAE,sBAAKhB,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CqC,GAA3C;AAAiD,aAPvE;AAQH,S,QAEDuC,U,GAAa,UAAC9E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,+BACAF,IAAIG,MADJ;AAAA,gBACvBC,IADuB,gBACvBA,IADuB;AAAA,gBACjBgB,KADiB,gBACjBA,KADiB;AAAA,gBACVd,KADU,gBACVA,KADU;;AAE7BN,gBAAIuE,SAAJ,CAAcjB,IAAd,CAAmB,EAAElC,OAAO,EAAE,UAAUA,KAAZ,EAAT,EAAnB,EAAmDuD,IAAnD,CAAwD,EAAEpB,KAAK,CAAC,CAAR,EAAxD,EAAqEqB,IAArE,CAA0E,CAACxE,OAAO,CAAR,IAAayE,SAASvE,KAAT,CAAvF,EAAwGA,KAAxG,CAA8GuE,SAASvE,KAAT,CAA9G,EAA+HgC,IAA/H,GACKrB,IADL,CACU,UAACmC,MAAD,EAAY;AACdpD,oBAAIuE,SAAJ,CAAc9C,KAAd,CAAoB,EAAEL,OAAO,EAAE,UAAUA,KAAZ,EAAT,EAApB,EAAoDkB,IAApD,GACKrB,IADL,CACU,UAACQ,KAAD,EAAW;AACb,wBAAIA,KAAJ,EACI,MAAKF,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAE2D,OAAO,CAAT,EAAYvC,SAAS,EAArB,EAAyBD,MAAM+B,MAA/B,EAAuC3B,OAAOA,KAA9C,EAA3C,EADJ,KAGI,MAAKF,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAE2D,OAAO,CAAT,EAAYvC,SAAS,iBAArB,EAAwCD,MAAM,EAA9C,EAAkDI,OAAOA,KAAzD,EAA3C;AACP,iBANL;AAOH,aATL,EAUKE,KAVL,CAUW,UAACY,GAAD,EAAS;AAAE,sBAAKhB,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CqC,GAA3C;AAAiD,aAVvE;AAWH,S,QAEDwC,W,GAAc,UAAC/E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,mCAAc8E,gBAAd,CAA+BhF,GAA/B,EACKiB,IADL,CACU,UAACgC,QAAD;AAAA,uBAAc,MAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C,CAAd;AAAA,aADV,EAEKtB,KAFL,CAEW,MAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC5B,GAApC,CAFX;AAGH,S,QAEDgF,Y,GAAe,UAACjF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,mCAAcgF,gBAAd,CAA+BlF,IAAIG,MAAJ,CAAWgF,IAA1C,EAAgDnF,IAAIoB,KAApD,EAA2DH,IAA3D,CAAgE,UAACgC,QAAD,EAAc;AAC1E,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEsB,QAAQ,SAAV,EAA3C;AACH,aAFD,EAEGG,KAFH,CAES,UAACY,GAAD,EAAS;AAAE6C,wBAAQC,GAAR,CAAY9C,GAAZ;AAAkB,aAFtC;AAGH,S,QAED+C,gB,GAAmB,UAACtF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,mCAAcoF,gBAAd,CAA+BtF,GAA/B,EAAoCiB,IAApC,CAAyC,UAACgC,QAAD,EAAc;AACnD,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C;AACH,aAFD;AAGH,S,QAEDsC,e,GAAkB,UAACvF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,mCAAcqF,eAAd,CAA8BvF,GAA9B,EAAmCiB,IAAnC,CAAwC,UAACgC,QAAD,EAAc;AAClD,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C;AACH,aAFD;AAGH,S,QAEDuC,W,GAAc,UAACxF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,mCAAcsF,WAAd,CAA0BxF,GAA1B,EAA+BiB,IAA/B,CAAoC,UAACgC,QAAD,EAAc;AAC9C,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C;AACH,aAFD;AAGH,S,QAEDwC,W,GAAc,UAACzF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,mCAAcuF,WAAd,CAA0BzF,GAA1B,EAA+BiB,IAA/B,CAAoC,UAACgC,QAAD,EAAc;AAC9C,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C;AACH,aAFD;AAGH,S,QAEDyC,W,GAAc,UAAC1F,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,mCAAcwF,WAAd,CAA0B1F,GAA1B,EAA+BiB,IAA/B,CAAoC,UAACgC,QAAD,EAAc;AAC9C,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C;AACH,aAFD;AAGH,S,QAED0C,a,GAAgB,UAAC3F,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChC,mCAAcyF,aAAd,CAA4B3F,IAAIO,IAAhC,EAAsCP,IAAIoB,KAA1C,EAAiDpB,IAAI4F,QAArD,EAA+D3E,IAA/D,CAAoE,UAACgC,QAAD,EAAc;AAC9E,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C+C,QAA3C;AACH,aAFD;AAGH,S,QAED4C,Y,GAAe,UAAC7F,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/BF,gBAAIoB,KAAJ,CAAUoC,MAAV,CAAiB,EAAED,KAAKvD,IAAIO,IAAJ,CAASwB,QAAhB,EAAjB,EAA6C,EAAE0B,QAAQ,IAAV,EAA7C,EAA+DxC,IAA/D,CAAoE,UAACgC,QAAD,EAAc;AAC9E,sBAAK1B,qBAAL,CAA2BvB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEoB,SAAS,kBAAX,EAA3C;AACH,aAFD;AAGH,S;;AArOD;;;;;;AAwOJ,IAAMwE,aAAa,IAAIhG,eAAJ,EAAnB;kBACegG,U","file":"fetchEmail.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport MailProvider from \"../providers/MailProvider\";\nimport Attachment from \"../modules/getAttachment\";\nimport imap from \"../service/imap\";\nimport * as _ from \"lodash\";\nimport inbox from \"../inbox\";\nimport db from \"../db\";\nimport mail from \"../modules/mail\";\nimport constant from \"../models/constant\";\nimport replaceData from \"../modules/replaceVariable\";\nimport email_process from \"../mongodb/emailprocess\";\nimport logs from \"../service/emaillogs\";\n\n\nexport class FetchController extends BaseAPIController {\n    /* Get INBOX data */\n    fetch = (req, res, next) => {\n        let { page, tag_id, limit } = req.params;\n        let { type, keyword, selected, default_id, is_attach } = req.body;\n        this._db.Tag.findAll({ where: { type: \"Default\" } })\n            .then((default_tag) => {\n                email_process.fetchEmail(page, tag_id, limit, type, keyword, selected, default_id, default_tag, req.email, is_attach)\n                    .then((data, message) => {\n                        this.handleSuccessResponse(req, res, next, {\n                            data: data,\n                            status: 1,\n                            count: req.count,\n                            message: (data.length) ? \"SUCCESS\" : \"No Emails Found\"\n                        })\n                    })\n                    .catch(this.handleErrorResponse.bind(null, res))\n            })\n            .catch(this.handleErrorResponse.bind(null, res))\n    }\n\n    assignTag = (req, res, next) => {\n        let { tag_id, mongo_id } = req.params;\n        this._db.Tag.findOne({ where: { id: tag_id } })\n            .then((data) => {\n                if (data.id) {\n                    req.email.findOneAndUpdate({ \"_id\": mongo_id }, { \"$addToSet\": { \"tag_id\": tag_id }, email_timestamp: new Date().getTime() }).exec((err, data) => {\n                        if (err) {\n                            next(new Error(err));\n                        } else {\n                            this.handleSuccessResponse(req, res, next, {\n                                data: data,\n                                status: 1,\n                                message: \"success\"\n                            });\n                        }\n                    });\n                } else {\n                    next(new Error(\"invalid tag id\"));\n                }\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    countEmail = (req, res, next) => {\n        email_process.findcount(req.email)\n            .then((data) => { this.handleSuccessResponse(req, res, next, data) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    assignMultiple = (req, res, next) => {\n        let where;\n        MailProvider.changeUnreadStatus(req.checkBody, req.body, req.getValidationResult())\n            .then(() => {\n                let { tag_id } = req.params;\n                email_process.assignMultiple(tag_id, req.body, req.email)\n                    .then((data) => {\n                        logs.emailLog(req, data.email_status)\n                            .then((response) => {\n                                this.handleSuccessResponse(req, res, next, data)\n                            })\n                    })\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n\n    deleteTag = (req, res, next) => {\n        MailProvider.deleteEmail(req.checkBody, req.body, req.getValidationResult())\n            .then(() => {\n                email_process.deleteTag(req.params.tag_id, req.body.mongo_id, req.email)\n                    .then((result) => {\n                        this.handleSuccessResponse(req, res, next, result)\n                    })\n                    .catch(this.handleErrorResponse(null, res));\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    changeUnreadStatus = (req, res, next) => {\n        let { mongo_id } = req.params;\n        let status = (req.params.status + '').toLowerCase() === 'true'\n        req.email.find({ _id: mongo_id }, (err) => {\n            if (err) {\n                next(new Error(err));\n            } else if (status == false) {\n                req.email.update({ _id: mongo_id }, { unread: status, read_email_time: new Date(), read_by_user: req.user.email }, (error) => {\n                    if (error) {\n                        next(new Error(err));\n                    } else {\n                        this.handleSuccessResponse(req, res, next, { status: 1, message: \"the unread status is successfully changed to \" + req.params.status });\n                    }\n                });\n            } else {\n                this.handleSuccessResponse(req, res, next, { status: 0, message: \"the unread status is not changed successfully,  you have to set status true or false\" });\n            }\n        });\n    }\n\n    deleteEmail = (req, res, next) => {\n        MailProvider.deleteEmail(req.checkBody, req.body, req.getValidationResult())\n            .then(() => {\n                email_process.deleteEmail(req.params.tag_id, req.body.mongo_id, req.email)\n                    .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n                    .catch(this.handleErrorResponse(null, res))\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    mailAttachment = (req, res, next) => {\n        email_process.mailAttachment(req.params.mongo_id, req.email)\n            .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n\n    findByTagId = (req, res, next, tag_id) => {\n        let { type, keyword, selected, default_id, is_attach } = req.body;\n        email_process.fetchById(type, keyword, selected, default_id, tag_id, is_attach)\n            .then((data) => {\n                this.getCount(req, res, next, data)\n            })\n    }\n\n    sendToMany = (req, res, next) => {\n        let { subject, body, tag_id, default_id } = req.body;\n        email_process.sendToMany(req, req.body.emails, subject, body, tag_id, default_id, req.email)\n            .then((response) => {\n                this.handleSuccessResponse(req, res, next, response)\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    sendToSelectedTag = (req, res, next) => {\n        email_process.sendToSelectedTag(req, req.body.tag_id, req.email)\n            .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    fetchByButton = (req, res, next) => {\n        inbox.fetchEmail(req.email, req.emailLogs, 'apiCall')\n            .then((data) => { this.handleSuccessResponse(req, res, next, { status: 1, message: \"success\" }) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    app_get_candidate = (req, res, next) => {\n        email_process.app_get_candidate(req.email, req.body.registration_id)\n            .then((result) => { this.handleSuccessResponse(req, res, next, { error: 0, message: \"\", data: result }) })\n            .catch((err) => { this.handleSuccessResponse(req, res, next, err) })\n    }\n\n    logs = (req, res, next) => {\n        let { page, limit } = req.params;\n        req.emailLogs.find().sort({ _id: -1 }).skip((page - 1) * parseInt(limit)).limit(parseInt(limit)).exec()\n            .then((result) => {\n                req.emailLogs.count().exec()\n                    .then((count) => {\n                        this.handleSuccessResponse(req, res, next, { error: 0, message: \"\", data: result, count: count })\n                    })\n            })\n            .catch((err) => { this.handleSuccessResponse(req, res, next, err) })\n    }\n\n    searchLogs = (req, res, next) => {\n        let { page, email, limit } = req.params;\n        req.emailLogs.find({ email: { \"$regex\": email } }).sort({ _id: -1 }).skip((page - 1) * parseInt(limit)).limit(parseInt(limit)).exec()\n            .then((result) => {\n                req.emailLogs.count({ email: { \"$regex\": email } }).exec()\n                    .then((count) => {\n                        if (count)\n                            this.handleSuccessResponse(req, res, next, { error: 0, message: \"\", data: result, count: count })\n                        else\n                            this.handleSuccessResponse(req, res, next, { error: 0, message: \"No Result Found\", data: [], count: count })\n                    })\n            })\n            .catch((err) => { this.handleSuccessResponse(req, res, next, err) })\n    }\n\n    emailStatus = (req, res, next) => {\n        email_process.checkEmailStatus(req)\n            .then((response) => this.handleSuccessResponse(req, res, next, response))\n            .catch(this.handleErrorResponse.bind(null, res))\n    }\n\n    fetchByDates = (req, res, next) => {\n        email_process.findEmailByDates(req.params.days, req.email).then((response) => {\n            this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" })\n        }).catch((err) => { console.log(err) })\n    }\n\n    sendToNotReplied = (req, res, next) => {\n        email_process.sendToNotReplied(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    sendBySelection = (req, res, next) => {\n        email_process.sendBySelection(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n    \n    insert_note = (req, res, next) => {\n        email_process.insert_note(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n    \n    update_note = (req, res, next) => {\n        email_process.update_note(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n    \n    cron_status = (req, res, next) => {\n        email_process.cron_status(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    archiveEmails = (req, res, next) => {\n        email_process.archiveEmails(req.body, req.email, req.archived).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    markAsUnread = (req, res, next) => {\n        req.email.update({ _id: req.body.mongo_id }, { unread: true }).then((response) => {\n            this.handleSuccessResponse(req, res, next, { message: \"marked as unread\" })\n        })\n    }\n}\n\nconst controller = new FetchController();\nexport default controller;"]}