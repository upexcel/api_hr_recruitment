{"version":3,"sources":["../../src/controllers/imap.js"],"names":["ImapController","save","req","res","next","_db","Imap","checkBody","body","getValidationResult","then","dataValues","tag","email","password","last_fetched_time","imapCredential","imap","imapConnection","connection","total_emails","messages","total","create","data","handleSuccessResponse","catch","handleErrorResponse","bind","err","Error","json","message","update","where","id","params","imapId","docs","status","deleteImap","destroy","getImap","findAll","order","response","getFetchedMailCount","result","statusActive","imapTest","idResult","getById","getImapById","controller"],"mappings":"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","file":"imap.js","sourcesContent":["import Imap from \"imap\";\nimport BaseAPIController from \"./BaseAPIController\";\nimport ImapProvider from \"../providers/ImapProvider\";\nimport imapService from \"../service/imap\";\nimport db from \"../db\";\nimport moment from \"moment\";\nimport email_process from \"../mongodb/emailprocess\";\n\nexport class ImapController extends BaseAPIController {\n\n    /* Controller for Save Imap Data  */\n    save = (req, res, next) => {\n        ImapProvider.save(this._db.Imap, req.checkBody, req.body, req.getValidationResult())\n            .then((dataValues) => {\n                let tag = {\n                    dataValues: {\n                        email: dataValues.email,\n                        password: dataValues.password,\n                        last_fetched_time: dataValues.last_fetched_time\n                    }\n                }\n                imapService.imapCredential(tag)\n                    .then((imap) => {\n                        imapService.imapConnection(imap)\n                            .then((connection) => {\n                                dataValues.total_emails = connection.messages.total;\n                                db.Imap.create(dataValues)\n                                    .then((data) => {\n                                        this.handleSuccessResponse(req, res, next, data)\n                                    })\n                                    .catch(this.handleErrorResponse.bind(null, res))\n                            })\n                            .catch(this.handleErrorResponse.bind(null, res))\n                    }, (err) => {\n                        throw new Error(res.json(400, { message: err }))\n                    })\n            }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Imap data Update */\n    update = (req, res, next) => {\n        ImapProvider.save(this._db.Imap, req.checkBody, req.body, req.getValidationResult())\n            .then((data) => {\n                this._db.Imap.update(data, {\n                        where: {\n                            id: req.params.imapId\n                        }\n                    })\n                    .then((docs) => {\n                        this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" });\n                    })\n            }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Imap data delete */\n    deleteImap = (req, res, next) => {\n        this._db.Imap.destroy({\n                where: {\n                    id: req.params.imapId\n                }\n            })\n            .then((docs) => {\n                this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" });\n            }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Get Imap data */\n    getImap = (req, res, next) => {\n        this._db.Imap.findAll({ order: '`id` DESC' })\n            .then((response) => {\n                email_process.getFetchedMailCount(response, req.email)\n                    .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n                    .catch(this.handleErrorResponse.bind(null, res))\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Imap Active  Status */\n    statusActive = (req, res, next) => {\n        this._db.Imap.imapTest(req.params.email)\n            .then((data) => this.handleSuccessResponse(req, res, next, data))\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Get Imapp data using id */\n    idResult = (req, res, next, imapId) => {\n        this.getById(req, res, this._db.Imap, imapId, next);\n    }\n\n    getImapById = (req, res, next) => {\n        this.handleSuccessResponse(req, res, next, req.result)\n    }\n}\n\n\nconst controller = new ImapController();\nexport default controller;"]}