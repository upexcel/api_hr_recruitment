{"version":3,"sources":["../../src/controllers/user.js"],"names":["UserController","create","req","res","next","_db","User","checkBody","body","getValidationResult","then","user","user_type","allowed_role","userType","admin","hr","guest","id","data","handleSuccessResponse","err","Error","json","error","message","catch","handleErrorResponse","bind","login","list","userFindAll","params","page","limit","deleteUser","userDelete","idResult","getById","logs","email","email_id","user_activity","length","controller"],"mappings":"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","file":"user.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport UserProvider from \"../providers/UserProvider.js\";\nimport constant from \"../models/constant\";\n\nexport class UserController extends BaseAPIController {\n\n    /* Controller for User Register  */\n    create = (req, res, next) => {\n        UserProvider.create(this._db.User, req.checkBody, req.body, req.getValidationResult())\n            .then((user) => {\n                let user_type = user.user_type;\n                let allowed_role = constant().userType;\n                if ((user_type == allowed_role.admin || user_type == allowed_role.hr || user_type == allowed_role.guest) && (req.user.id)) {\n                    this._db.User.create(user)\n                        .then((data) => {\n                            this.handleSuccessResponse(req, res, next, data)\n                        }, (err) => {\n                            throw new Error(res.json(400, {\n                                error: 1,\n                                message: err,\n                                data: []\n                            }));\n                        })\n                } else {\n                    throw new Error(res.json(400, {\n                        error: 1,\n                        message: \"Invalid User Type\",\n                        data: []\n                    }))\n                }\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n\n    /* Controller for User Login  */\n    login = (req, res, next) => {\n        let login = UserProvider.login(this._db.User, req.body);\n        this._db.User.login(login)\n            .then((data) => { this.handleSuccessResponse(req, res, next, data) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /*controller for user list*/\n    list = (req, res, next) => {\n        this._db.User.userFindAll(req.user, req.params.page, req.params.limit)\n            .then((data) => { this.handleSuccessResponse(req, res, next, { error: 0, message: \"success\", data: data }) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /*Controller for user delete*/\n    deleteUser = (req, res, next) => {\n        this._db.User.userDelete(req.user, req.params.id)\n            .then((data) => { this.handleSuccessResponse(req, res, next, { error: 0, message: \"success\", data: data }) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /*Find Id result*/\n    idResult = (req, res, next, id) => {\n        this.getById(req, res, this._db.User, id, next)\n    }\n\n    logs = (req, res, next) => {\n        let email = req.params.email_id;\n        this._db.User.logs(req.user_activity, email)\n            .then((data) => {\n                if (data.length)\n                    this.handleSuccessResponse(req, res, next, { error: 0, message: \"success\", data: data })\n                else\n                    this.handleSuccessResponse(req, res, next, { error: 0, message: \"No Logs Found\", data: data })\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n}\n\nconst controller = new UserController();\nexport default controller;"]}