{"version":3,"sources":["../../src/controllers/tag.js"],"names":["TagController","save","req","res","next","assign","body","_db","params","type","checkBody","getValidationResult","then","response","parent_id","parseInt","Tag","create","data","tagType","automatic","assignToOldTag","email","result","handleSuccessResponse","default","assignToNewTag","status","send","message","err","json","catch","handleErrorResponse","bind","update","assign_to_all_emails","Imap","where","id","tagId","docs","assignTagDuringUpdate","deleteTag","manual","destroyDefault","destroy","tag_id","$all","$pull","multi","getTag","findAll","offset","page","limit","order","Error","getAllTag","getTagById","findOne","idResult","getById","getShedule","updatePriority","controller"],"mappings":"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","file":"tag.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport TagProvider from \"../providers/TagProvider\";\nimport tag from \"../models/constant\";\nimport _ from 'lodash';\nimport moment from 'moment';\nimport constant from \"../models/constant\";\nimport email_process from \"../mongodb/emailprocess\";\n\nexport class TagController extends BaseAPIController {\n    /* Controller for Save Imap Data  */\n    save = (req, res, next) => {\n        var assign = req.body.assign;\n        TagProvider.save(this._db, req.params.type, req.checkBody, req.body, req.getValidationResult())\n            .then((response) => {\n                response.parent_id = (response.parent_id) ? parseInt(response.parent_id) : 0;\n                this._db.Tag.create(response)\n                    .then((data) => {\n                        if (data) {\n                            if ((data.type == tag().tagType.automatic) && (assign === true)) {\n                                email_process.assignToOldTag(data, req.email)\n                                    .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n                            } else if ((data.type == tag().tagType.default)) {\n                                email_process.assignToNewTag(data, req.email)\n                                    .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n                            } else {\n                                this.handleSuccessResponse(req, res, next, data)\n                            }\n                        } else {\n                            res.status(500).send({ message: \"Tag is not Added\" })\n                        }\n                    }, (err) => {\n                        res.status(500).json({ message: err })\n                    })\n            }).catch(this.handleErrorResponse.bind(null, res));\n\n    }\n\n\n    /* Imap data Update*/\n    update = (req, res, next) => {\n        let assign = req.body.assign_to_all_emails;\n        TagProvider.save(this._db.Imap, req.params.type, req.checkBody, req.body, req.getValidationResult())\n            .then((data) => {\n                this._db.Tag.update(data, {\n                        where: {\n                            id: req.params.tagId,\n                            type: req.params.type\n                        }\n                    })\n                    .then((docs) => {\n                        if (assign) {\n                            this._db.Tag.assignTagDuringUpdate(req.params.tagId, req).then((response) => {\n                                this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" });\n                            })\n                        } else {\n                            this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" });\n                        }\n                    })\n            }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Imap data delete */\n\n    deleteTag = (req, res, next) => {\n        if (req.params.type == tag().tagType.automatic || req.params.type == tag().tagType.manual || req.params.type == tag().tagType.default) {\n            if (req.params.type == tag().tagType.default) {\n                this._db.Tag.destroyDefault( req.email,this._db,req.params.tagId, req.params.type).then((status) => {\n                    this.handleSuccessResponse(req, res, next, { status: status });\n                }).catch(this.handleErrorResponse.bind(null, res));\n            } else {\n                this._db.Tag.destroy({ where: { id: req.params.tagId, type: req.params.type } })\n                    .then((docs) => {\n                        if (docs) {\n                            req.email.update({ tag_id: { $all: [req.params.tagId] } }, { $pull: { tag_id: req.params.tagId } }, { multi: true })\n                                .then((data) => {\n                                    this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" });\n                                })\n                                .catch(this.handleErrorResponse.bind(null, res));\n                        } else {\n                            next(res.status(400).send({ message: \"Invalid tagId\" }));\n                        }\n                    }).catch(this.handleErrorResponse.bind(null, res));\n            }\n        } else {\n            next(res.status(400).send({ message: \"Invalid tag type \" }));\n        }\n    }\n\n    /* Get Imap data */\n    getTag = (req, res, next) => {\n        if (req.params.type == tag().tagType.automatic || req.params.type == tag().tagType.manual || req.params.type == tag().tagType.default) {\n            this._db.Tag.findAll({\n                    offset: (req.params.page - 1) * parseInt(req.params.limit),\n                    limit: parseInt(req.params.limit),\n                    where: {\n                        type: req.params.type\n                    },\n                    order: '`id` DESC'\n                })\n                .then((data) => this.handleSuccessResponse(req, res, next, data))\n                .catch(this.handleErrorResponse.bind(null, res));\n        } else {\n            next(new Error(\"Invalid Type\"));\n        }\n    }\n\n    /* Get all tag */\n    getAllTag = (req, res, next) => {\n        this._db.Tag.findAll({ order: '`priority` ASC' })\n            .then((data) => this.handleSuccessResponse(req, res, next, data))\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Get tag by id */\n    getTagById = (req, res, next) => {\n        if (req.params.type == tag().tagType.automatic || req.params.type == tag().tagType.manual || req.params.type == tag().tagType.default) {\n            this._db.Tag.findOne({\n                    where: {\n                        id: req.result.id,\n                        type: req.params.type\n                    }\n                })\n                .then((data) => this.handleSuccessResponse(req, res, next, data))\n                .catch(this.handleErrorResponse.bind(null, res));\n        } else {\n            next(new Error(\"Invalid Type\"));\n        }\n    }\n\n    /* Get Imap data using id*/\n    idResult = (req, res, next, tagId) => {\n        this.getById(req, res, this._db.Tag, tagId, next);\n    }\n\n    /*Get Shedules*/\n    getShedule = (req, res, next) => {\n        email_process.getShedule(req.email)\n            .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n            .catch(this.handleErrorResponse)\n    }\n\n    /*updatePriority*/\n    updatePriority = (req, res, next) => {\n        this._db.Tag.updatePriority(req.body).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n}\n\nconst controller = new TagController();\nexport default controller;"]}