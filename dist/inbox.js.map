{"version":3,"sources":["../src/inbox.js"],"names":["MailParser","require","simpleParser","module","exports","fetchEmail","email","logs","apiCall","Promise","resolve","reject","Imap","findAll","where","then","docs","err","forEach","val","key","imapCredential","imap","headers","once","imapConnection","response","delay","yesterday","Date","setTime","now","toISOString","search","results","console","log","UID_arr","find","imap_email","dataValues","sort","email_timestamp","limit","exec","resp","length","row","Last_UID","get","push","count","f","fetch","bodies","struct","on","msg","seqno","flag","uid","unread","answered","attach","attrs","flags","type","stream","buffer","findEmail","mail","email_data_to_store","from","to","sender_mail","date","email_date","subject","body","html","text","textAsHtml","tags","tag","tagId","default_tag_id","getTime","findOne","data","detail","email_id","tag_id","is_automatic_email_send","default_tag","is_attachment","genuine_applicant","Genuine_Applicant","send_template_count","template_id","reply_to_id","save","message","catch","chunk","toString","end","error","connect","beforeDateEmail","dateFrom","last_fetched_time","format","current_date","subtract","add","old_emails_fetch_days_count","update","last_updated_time","messages","total","imap_emails","skippedDates","left_days","days_left_to_fetched","fetched_date_till"],"mappings":"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","file":"inbox.js","sourcesContent":["import Imap from \"imap\";\nimport in_array from \"in_array\";\nimport GENERIC from \"./modules/generic\";\nimport _ from \"lodash\";\nimport db from \"./db\";\nimport config from \"./config.js\";\nimport mail from \"./modules/mail\";\nimport replace from \"./modules/replaceVariable\";\nimport automaticTag from \"./modules/automaticTags\";\nimport imapService from \"./service/imap\";\nimport moment from \"moment\";\nimport constant from './models/constant';\nvar MailParser = require(\"mailparser\").simpleParser;\nimport forwardedEmail from \"./modules/forwardedemail\"\n\n\nmodule.exports = {\n    fetchEmail: function(email, logs, apiCall) {\n        return new Promise((resolve, reject) => {\n            db.Imap.findAll({\n                where: {\n                    \"active\": true\n                }\n            }).then(function(docs, err) {\n                if (docs) {\n                    _.forEach(docs, (val, key) => {\n                        imapService.imapCredential(val)\n                            .then((imap) => {\n                                var headers = {};\n                                imap.once(\"ready\", function() {\n                                    imapService.imapConnection(imap)\n                                        .then((response) => {\n                                            var delay = 24 * 3600 * 1000;\n                                            var yesterday = new Date();\n                                            yesterday.setTime(Date.now() - delay);\n                                            yesterday = yesterday.toISOString();\n                                            imap.search([\"ALL\", [\"SINCE\", yesterday]], function(err, results) {\n                                                if (err) {\n                                                    console.log(err)\n                                                } else if (results) {\n                                                    let UID_arr = [];\n                                                    email.find({ imap_email: val.dataValues.email }).sort({\n                                                        email_timestamp: -1\n                                                    }).limit(1).exec(function(err, resp) {\n                                                        if (err) {\n                                                            console.log(err);\n                                                        } else {\n                                                            if (resp.length == 0) {\n                                                                UID_arr = results;\n                                                            } else {\n                                                                var row = resp[0];\n                                                                var Last_UID = row.get(\"uid\");\n                                                                _.forEach(results, (val) => {\n                                                                    if (val > Last_UID) {\n                                                                        UID_arr.push(val);\n                                                                    }\n                                                                });\n                                                            }\n                                                            var count = UID_arr.length;\n                                                            if (UID_arr[0] != null) {\n                                                                var f = imap.fetch(UID_arr, {\n                                                                    bodies: \"\",\n                                                                    struct: true\n                                                                });\n                                                                f.on(\"message\", function(msg, seqno) {\n                                                                    let flag = \"\";\n                                                                    let uid = \"\";\n                                                                    let unread\n                                                                    let answered\n                                                                    let attach;\n\n                                                                    msg.once(\"attributes\", function(attrs) {\n                                                                        flag = attrs.flags;\n                                                                        uid = attrs.uid;\n                                                                        unread = !(in_array('\\\\Seen', flag));\n                                                                        answered = in_array(\"\\\\Answered\", flag);\n                                                                        if (attrs.struct[0].type == \"mixed\") {\n                                                                            attach = true;\n                                                                        }\n                                                                    });\n                                                                    msg.on(\"body\", function(stream) {\n                                                                        var buffer = \"\";\n                                                                        MailParser(stream).then(mail => {\n                                                                            forwardedEmail.findEmail(mail)\n                                                                                .then((email_data_to_store) => {\n                                                                                    let { from, to, sender_mail, date, email_date, email_timestamp, subject } = email_data_to_store;\n                                                                                    let body = mail.html || mail.text || mail.textAsHtml\n                                                                                    automaticTag.tags(email, subject, date, from, sender_mail, val.dataValues.email, logs, to, true)\n                                                                                        .then((tag) => {\n                                                                                            if (tag.tagId.length || tag.default_tag_id) {\n                                                                                                date = new Date(date).getTime()\n                                                                                            }\n                                                                                            email.findOne({\n                                                                                                uid: uid,\n                                                                                                imap_email: val.dataValues.email\n                                                                                            }, function(err, data) {\n                                                                                                --count;\n                                                                                                if (err) {\n                                                                                                    console.log(err)\n                                                                                                }\n                                                                                                if (!data) {\n                                                                                                    let detail = new email({\n                                                                                                        email_id: seqno,\n                                                                                                        from: from,\n                                                                                                        to: to,\n                                                                                                        sender_mail: sender_mail,\n                                                                                                        date: date,\n                                                                                                        email_date: email_date,\n                                                                                                        email_timestamp: email_timestamp,\n                                                                                                        subject: subject,\n                                                                                                        unread: true,\n                                                                                                        answered: answered,\n                                                                                                        uid: uid,\n                                                                                                        body: body,\n                                                                                                        tag_id: tag.tagId,\n                                                                                                        is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                        default_tag: tag.default_tag_id || \"\",\n                                                                                                        is_attachment: attach || false,\n                                                                                                        imap_email: val.dataValues.email,\n                                                                                                        genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                        send_template_count: tag.count || 0,\n                                                                                                        template_id: tag.template_id || [],\n                                                                                                        reply_to_id: tag.reply_to_id\n                                                                                                    });\n                                                                                                    detail.save(function(err) {\n                                                                                                        if (err) {\n                                                                                                            console.log(\"Duplicate Data\");\n                                                                                                        } else {\n                                                                                                            console.log(\"data saved successfully\");\n                                                                                                            if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                                resolve({ message: \"All data fetched successfully\" });\n                                                                                                            } else if (key == docs.length - 1) {\n                                                                                                                resolve({ message: \"All data fetched successfully\" })\n                                                                                                            }\n                                                                                                        }\n                                                                                                    });\n                                                                                                } else {\n                                                                                                    console.log('Data already saved');\n                                                                                                    if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                        resolve({ message: \"All data fetched successfully\" });\n                                                                                                    } else if (key == docs.length - 1) {\n                                                                                                        resolve({ message: \"All data fetched successfully\" })\n                                                                                                    }\n                                                                                                }\n                                                                                            })\n                                                                                        })\n                                                                                })\n                                                                        }).catch(err => {\n                                                                            console.log(err);\n                                                                        });\n                                                                        stream.on(\"data\", function(chunk) {\n                                                                            buffer += chunk.toString(\"utf8\");\n                                                                        });\n\n                                                                        stream.once(\"end\", function() {\n\n                                                                        });\n                                                                    });\n                                                                });\n                                                                f.once(\"error\", function(err) {\n                                                                    console.log(\"Fetch error: \" + err);\n                                                                });\n                                                                f.once(\"end\", function() {\n                                                                    console.log(\"Done fetching all messages!\");\n                                                                    imap.end();\n                                                                });\n                                                            } else {\n                                                                console.log(\"Nothing To fetch\")\n                                                                resolve({ message: \"Nothing To fetch\" })\n                                                            }\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        })\n                                        .catch((error) => {\n                                            console.log(error)\n                                        })\n                                });\n                                imap.once(\"error\", function(err) {\n                                    console.log(err);\n                                });\n                                imap.once(\"end\", function() {\n                                    console.log(\"Connection ended\");\n                                });\n                                imap.connect();\n                            });\n                    });\n                } else {\n                    console.log(err);\n                }\n            })\n        });\n    },\n    beforeDateEmail: function(email) {\n        return new Promise((resolve, reject) => {\n            db.Imap.findAll({\n                where: {\n                    \"active\": true\n                }\n            }).then(function(docs, err) {\n                let count = 0;\n                if (docs[0] != null) {\n                    _.forEach(docs, (val, key) => {\n                        imapService.imapCredential(val)\n                            .then((imap) => {\n                                var headers = {};\n                                imap.once(\"ready\", function() {\n                                    imapService.imapConnection(imap)\n                                        .then((response) => {\n                                            let date = '';\n                                            let dateFrom = '';\n                                            var row = val.dataValues;\n                                            if (row && row.last_fetched_time) {\n                                                date = moment(new Date(row.last_fetched_time)).format(\"MMM DD, YYYY\");\n                                                let current_date = moment(new Date()).subtract(1, 'days').format(\"MMM DD, YYYY\");\n                                                if (new Date() <= new Date(date)) {\n                                                    dateFrom = moment(new Date()).subtract(1, 'days').format('MMM DD, YYYY');\n                                                } else {\n                                                    dateFrom = moment(date).add(constant().old_emails_fetch_days_count, 'days').format('MMM DD, YYYY');\n                                                }\n                                            }\n                                            imap.search(['ALL', ['SINCE', date],\n                                                ['BEFORE', dateFrom]\n                                            ], function(err, results) {\n                                                if (err) {\n                                                    console.log(err)\n                                                } else if (results.length) {\n                                                    if (new Date() <= new Date(dateFrom)) {\n                                                        dateFrom = moment(new Date()).subtract(1, 'days').format('YYYY-MM-DD');\n                                                    }\n                                                    db.Imap.update({ last_fetched_time: dateFrom }, { where: { email: val.email } })\n                                                        .then((last_updated_time) => { console.log(\"last time updated\") })\n                                                    count = results.length\n                                                    var f = imap.fetch(results, {\n                                                        bodies: \"\",\n                                                        struct: true\n                                                    });\n                                                    f.on(\"message\", function(msg, seqno) {\n                                                        let flag = \"\";\n                                                        let uid = \"\";\n                                                        let unread\n                                                        let answered\n                                                        let attach;\n\n                                                        msg.once(\"attributes\", function(attrs) {\n                                                            flag = attrs.flags;\n                                                            uid = attrs.uid;\n                                                            unread = !(in_array('\\\\Seen', flag));\n                                                            answered = in_array(\"\\\\Answered\", flag);\n                                                            if (attrs.struct[0].type == \"mixed\") {\n                                                                attach = true;\n                                                            }\n                                                        });\n\n                                                        msg.on(\"body\", function(stream) {\n                                                            var buffer = \"\";\n                                                            MailParser(stream).then(mail => {\n                                                                forwardedEmail.findEmail(mail)\n                                                                    .then((email_data_to_store) => {\n                                                                        let { from, to, sender_mail, date, email_date, email_timestamp, subject } = email_data_to_store;\n                                                                        let body = mail.html || mail.text || mail.textAsHtml\n                                                                        automaticTag.tags(email, subject, date, from, sender_mail, val.dataValues.email, to, false, false)\n                                                                            .then((tag) => {\n                                                                                if (tag.tagId.length || tag.default_tag_id) {\n                                                                                    date = new Date(date).getTime()\n                                                                                }\n                                                                                email.findOne({\n                                                                                    uid: uid,\n                                                                                    imap_email: val.dataValues.email\n                                                                                }, function(err, data) {\n                                                                                    --count;\n                                                                                    if (err) {\n                                                                                        console.log(err)\n                                                                                    }\n                                                                                    if (!data) {\n                                                                                        let detail = new email({\n                                                                                            email_id: seqno,\n                                                                                            from: from,\n                                                                                            to: to,\n                                                                                            sender_mail: sender_mail,\n                                                                                            date: date,\n                                                                                            email_date: email_date,\n                                                                                            email_timestamp: email_timestamp,\n                                                                                            subject: subject,\n                                                                                            unread: true,\n                                                                                            answered: answered,\n                                                                                            uid: uid,\n                                                                                            body: body,\n                                                                                            tag_id: tag.tagId,\n                                                                                            is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                            default_tag: tag.default_tag_id || \"\",\n                                                                                            is_attachment: attach || false,\n                                                                                            imap_email: val.dataValues.email,\n                                                                                            genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                            send_template_count: tag.count || 0,\n                                                                                            template_id: tag.template_id || []\n                                                                                        });\n                                                                                        detail.save(function(err) {\n                                                                                            if (err) {\n                                                                                                console.log(\"Duplicate Data\");\n                                                                                            } else {\n                                                                                                console.log(\"data saved successfully\");\n                                                                                            }\n                                                                                        });\n                                                                                    } else {\n                                                                                        if (count) {\n                                                                                            console.log(\"Data already saved\");\n                                                                                        }\n                                                                                    }\n                                                                                })\n                                                                            })\n                                                                    })\n                                                            }).catch(err => {\n                                                                console.log(err);\n                                                            });\n                                                            stream.on(\"data\", function(chunk) {\n                                                                buffer += chunk.toString(\"utf8\");\n                                                            });\n\n                                                            stream.once(\"end\", function() {\n\n                                                            });\n                                                        });\n                                                    });\n                                                    f.once(\"error\", function(err) {\n                                                        console.log(\"Fetch error: \" + err);\n                                                    });\n                                                    f.once(\"end\", function() {\n                                                        console.log(\"Done fetching all messages!\");\n                                                        imap.end();\n                                                    });\n                                                } else {\n                                                    email.find({ imap_email: val.dataValues.email }).count().exec(function(err, count) {\n                                                        if (count >= response.messages.total) {\n                                                            console.log('Nothing to Fetch');\n                                                        } else {\n                                                            db.Imap.update({ last_fetched_time: dateFrom }, { where: { email: val.email } })\n                                                                .then((last_updated_time) => { console.log(\"last time updated\") })\n                                                        }\n                                                    })\n                                                }\n                                            });\n                                        })\n                                        .then((error) => {\n                                            console.log(error)\n                                        })\n                                });\n                                imap.once(\"error\", function(err) {\n                                    console\n                                        .log(err);\n                                });\n                                imap.once(\"end\", function() {\n                                    console.log(\"Connection ended\");\n                                });\n                                imap.connect();\n                            });\n                        if (!count && (key == docs.length - 1)) {\n                            let imap_emails = [];\n                            _.forEach(docs, (email, key) => {\n                                imap_emails.push(email.email)\n                            })\n                        }\n                    });\n                } else {\n                    console.log(\"No Active connection\")\n                }\n            });\n        });\n    },\n\n    skippedDates: function(email, logs) {\n        return new Promise((resolve, reject) => {\n            let count;\n            db.Imap.findAll({\n                where: {\n                    \"active\": true\n                }\n            }).then(function(docs, err) {\n                if (docs[0] != null) {\n                    _.forEach(docs, (val, key) => {\n                        imapService.imapCredential(val)\n                            .then((imap) => {\n                                let headers = {};\n                                imap.once(\"ready\", function() {\n                                    imapService.imapConnection(imap)\n                                        .then((response) => {\n                                            let date = '';\n                                            let dateFrom = '';\n                                            let row = val.dataValues;\n                                            let left_days;\n                                            if (row.days_left_to_fetched) {\n                                                if (!row.fetched_date_till) {\n                                                    row.fetched_date_till = new Date();\n                                                }\n                                                date = moment(new Date(row.fetched_date_till)).format(\"MMM DD, YYYY\");\n                                                dateFrom = moment(date).subtract(constant().old_emails_fetch_days_count, 'days').format('MMM DD, YYYY');\n                                                left_days = row.days_left_to_fetched - constant().old_emails_fetch_days_count;\n                                                imap.search(['ALL', ['SINCE', dateFrom],\n                                                    ['BEFORE', date]\n                                                ], function(err, results) {\n                                                    if (err) {\n                                                        console.log(err)\n                                                    } else if (results.length) {\n                                                        db.Imap.update({ fetched_date_till: dateFrom, days_left_to_fetched: left_days }, { where: { email: val.email } })\n                                                            .then((last_updated_time) => { console.log(\"last time updated\") })\n                                                        count = results.length\n                                                        let f = imap.fetch(results, {\n                                                            bodies: \"\",\n                                                            struct: true\n                                                        });\n                                                        f.on(\"message\", function(msg, seqno) {\n                                                            let flag = \"\";\n                                                            let uid = \"\";\n                                                            let unread\n                                                            let answered\n                                                            let attach;\n\n                                                            msg.once(\"attributes\", function(attrs) {\n                                                                flag = attrs.flags;\n                                                                uid = attrs.uid;\n                                                                unread = !(in_array('\\\\Seen', flag));\n                                                                answered = in_array(\"\\\\Answered\", flag);\n                                                                if (attrs.struct[0].type == \"mixed\") {\n                                                                    attach = true;\n                                                                }\n                                                            });\n\n\n                                                            msg.on(\"body\", function(stream) {\n                                                                var buffer = \"\";\n                                                                MailParser(stream).then(mail => {\n                                                                    forwardedEmail.findEmail(mail)\n                                                                        .then((email_data_to_store) => {\n                                                                            let { from, to, sender_mail, date, email_date, email_timestamp, subject } = email_data_to_store;\n                                                                            let body = mail.html || mail.text || mail.textAsHtml\n                                                                            automaticTag.tags(email, subject, date, from, sender_mail, val.dataValues.email, logs, to, true)\n                                                                                .then((tag) => {\n                                                                                    if (tag.tagId.length || tag.default_tag_id) {\n                                                                                        date = new Date(date).getTime()\n                                                                                    }\n                                                                                    email.findOne({\n                                                                                        uid: uid,\n                                                                                        imap_email: val.dataValues.email\n                                                                                    }, function(err, data) {\n                                                                                        --count;\n                                                                                        if (err) {\n                                                                                            console.log(err)\n                                                                                        }\n                                                                                        if (!data) {\n                                                                                            let detail = new email({\n                                                                                                email_id: seqno,\n                                                                                                from: from,\n                                                                                                to: to,\n                                                                                                sender_mail: sender_mail,\n                                                                                                date: date,\n                                                                                                email_date: email_date,\n                                                                                                email_timestamp: email_timestamp,\n                                                                                                subject: subject,\n                                                                                                unread: true,\n                                                                                                answered: answered,\n                                                                                                uid: uid,\n                                                                                                body: body,\n                                                                                                tag_id: tag.tagId,\n                                                                                                is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                default_tag: tag.default_tag_id || \"\",\n                                                                                                is_attachment: attach || false,\n                                                                                                imap_email: val.dataValues.email,\n                                                                                                genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                send_template_count: tag.count || 0,\n                                                                                                template_id: tag.template_id || []\n                                                                                            });\n                                                                                            detail.save(function(err) {\n                                                                                                if (err) {\n                                                                                                    console.log(\"Duplicate Data\");\n                                                                                                } else {\n                                                                                                    console.log(\"data saved successfully\");\n                                                                                                    resolve()\n                                                                                                }\n                                                                                            });\n                                                                                        } else {\n                                                                                            if (count) {\n                                                                                                console.log(\"Data already saved\");\n                                                                                            } else {\n                                                                                                resolve()\n                                                                                            }\n                                                                                        }\n                                                                                    })\n                                                                                })\n                                                                        })\n                                                                }).catch(err => {\n                                                                    console.log(err);\n                                                                });\n                                                                stream.on(\"data\", function(chunk) {\n                                                                    buffer += chunk.toString(\"utf8\");\n                                                                });\n\n                                                                stream.once(\"end\", function() {\n\n                                                                });\n                                                            });\n                                                        });\n                                                        f.once(\"error\", function(err) {\n                                                            console.log(\"Fetch error: \" + err);\n                                                        });\n                                                        f.once(\"end\", function() {\n                                                            console.log(\"Done fetching all messages!\");\n                                                            imap.end();\n                                                        });\n                                                    } else {\n                                                        email.find({ imap_email: val.dataValues.email }).count().exec(function(err, count) {\n                                                            if (count >= response.messages.total) {\n                                                                console.log('Nothing to Fetch');\n                                                                resolve()\n                                                            } else {\n\n                                                                db.Imap.update({ fetched_date_till: dateFrom, days_left_to_fetched: left_days }, { where: { email: val.email } })\n                                                                    .then((last_updated_time) => {\n                                                                        console.log(\"last time updated\")\n                                                                        resolve()\n                                                                    })\n                                                            }\n                                                        })\n                                                    }\n                                                });\n                                            } else {\n                                                resolve(\"nothing in pending\")\n                                            }\n\n                                        })\n                                        .then((error) => {\n                                            console.log(error)\n                                        })\n                                });\n                                imap.once(\"error\", function(err) {\n                                    console.log(err);\n                                });\n                                imap.once(\"end\", function() {\n                                    console.log(\"Connection ended\");\n                                });\n                                imap.connect();\n                            });\n                        if (!count && (key == docs.length - 1)) {\n                            let imap_emails = [];\n                            _.forEach(docs, (email, key) => {\n                                imap_emails.push(email.email)\n                            })\n                        }\n                    });\n                } else {\n                    console.log(\"No Active connection\")\n                    resolve()\n                }\n            });\n        })\n    }\n};"]}