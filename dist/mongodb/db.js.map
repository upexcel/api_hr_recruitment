{"version":3,"sources":["../../src/mongodb/db.js"],"names":["db","mongodb","process","env","console","log","exit","conn","connect","module","exports","emailSchema","Schema","email_id","type","Number","from","String","to","sender_mail","date","Date","email_date","email_timestamp","subject","unread","Boolean","answered","is_automatic_email_send","uid","body","tag_id","Array","default_tag","imap_email","genuine_applicant","attachment","is_attachment","shedule_for","shedule_date","shedule_time","push_message","push_status","registration_id","mobile_no","updated_time","send_template","read_email_time","read_by_user","reminder_send","send_template_count","template_id","notes","reply_to_id","collection","strict","userActivity","emailLogs","email","time","user","cron_work","archive_emails","model","user_activity","email_logs","cronWork","archivedMails","cron","reminder","PendingEmails","req","res","next","archived"],"mappings":"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","file":"db.js","sourcesContent":["import mongoose from \"mongoose\";\nimport config from \"../config\";\nlet db = config.mongodb || process.env.mongodb;\nif (!db) {\n    console.log(\"Mongodb information is not fount update config details\");\n    process.exit(0)\n}\n// let conn = mongoose.createConnection(\"mongodb://localhost/\" + db);\n\nlet conn = 'mongodb://recruit-dev:java123@ds147265.mlab.com:47265/hr_recruit_dev';\nconn = mongoose.connect(conn)\n\nimport cronService from \"../service/cron.js\";\n// the middleware function\nmodule.exports = function() {\n\n    // create schema\n    let emailSchema = mongoose.Schema({\n        email_id: { type: Number },\n        from: { type: String },\n        to: { type: String },\n        sender_mail: { type: String },\n        date: { type: Date },\n        email_date: { type: Date },\n        email_timestamp: { type: String },\n        subject: { type: String },\n        unread: { type: Boolean },\n        answered: { type: Boolean },\n        is_automatic_email_send: { type: Number },\n        uid: { type: Number },\n        body: { type: String },\n        tag_id: { type: Array },\n        default_tag: { type: String },\n        imap_email: { type: String },\n        genuine_applicant: { type: String },\n        attachment: { type: Array },\n        is_attachment: { type: Boolean },\n        shedule_for: { type: String },\n        shedule_date: { type: Date },\n        shedule_time: { type: String },\n        push_message: { type: Array },\n        push_status: { type: Boolean },\n        registration_id: { type: Number },\n        mobile_no: { type: String },\n        updated_time: { type: Date },\n        send_template: { type: String },\n        read_email_time: { type: Date },\n        read_by_user: { type: String },\n        reminder_send: { type: Boolean },\n        send_template_count: { type: Number },\n        template_id: { type: Array },\n        notes: { type: Array },\n        reply_to_id: { type: String }\n    }, {\n        collection: \"emailStored\",\n        strict: true,\n    });\n\n    let userActivity = mongoose.Schema({}, {\n        collection: 'userActivity',\n        strict: false\n    })\n    let emailLogs = mongoose.Schema({\n        email: { type: Array },\n        from: { type: String },\n        time: { type: Date },\n        user: { type: String },\n        subject: { type: String },\n        body: { type: String },\n        tag_id: { type: Array },\n    }, {\n        collection: 'emaillogs',\n        strict: true\n    })\n    let cron_work = mongoose.Schema({}, {\n        collection: 'cronWork',\n        strict: false\n    })\n\n    let archive_emails = mongoose.Schema({}, {\n        collection: 'archivedMails',\n        strict: false\n    })\n\n    let email = conn.model(\"EMAIL\", emailSchema);\n    let user_activity = conn.model('ACTIVITY', userActivity);\n    let email_logs = conn.model('EMAILLOGS', emailLogs);\n    let cronWork = conn.model('CRONSTATUS', cron_work);\n    let archivedMails = conn.model('ARCHIVED', archive_emails);\n\n    cronService.cron(email, email_logs)\n    cronService.reminder(email, email_logs)\n    cronService.PendingEmails(cronWork, email_logs, email);\n\n    return function(req, res, next) {\n        req.email = email;\n        req.user_activity = user_activity;\n        req.emailLogs = email_logs;\n        req.cronWork = cronWork;\n        req.archived = archivedMails\n        next();\n    };\n};"]}