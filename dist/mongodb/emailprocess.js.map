{"version":3,"sources":["../../src/mongodb/emailprocess.js"],"names":["_","fetchEmail","page","tag_id","limit","type","keyword","selected","default_id","default_tag","db","is_attach","Promise","resolve","reject","message","default_tag_id","forEach","val","key","push","id","toString","where","isNaN","is_attachment","indexOf","$size","$in","find","sort","date","skip","parseInt","exec","err","data","console","log","findcount","mongodb","count1","tagId","mails_unread_count","mails_total_count","sub_child_list","candidate_list","final_data","Tag","findAll","tagType","automatic","is_job_profile_tag","then","tags","order","candidate","unread","result","length","findCount","findAttachmentMailsCount","attachment_count","mails","title","count","default_id1","subchild","default","genuine","data1","array","callback","attachment_mail_total_count","attachment_mail_unread_count","findDefaultCount","id1","splice","result1","default_tag_data","color","default_tag_list","find_child_count","response","unshift","default_tag_mail","child","parent_id","tagData","assignMultiple","body","email","findOne","shedule_for","value","registration_id","Math","floor","random","shedule_date","shedule_time","mobile_no","updated_time","Date","send_template","tamplate_id","update","mongo_id","multi","Template","findById","template","schedule_filter","from","scheduled_date","scheduled_time","replaced_data","registration_message","Smtp","status","smtp","subject","custom_link","app_custom_link","sendScheduledMail","sender_mail","mail_response","tag_info","link","attachment","slack_message","slackNotification","Candidate_device","email_id","device_list","push_message","text","format","pushMessage","push_response","error","push_notification_message","saved_info","push_status","email_status","fetchById","sendToMany","req","email_list","emails","cronWork","user","work","sendToAll","template_id","save","sendToSelectedTag","email_send_success_list","email_send_fail_list","is_automatic_email_send","pending_work","mailAttachment","_id","to","get","uid","Imap","imapCredential","imap","getAttachment","findOneAndUpdate","$set","new","deleteEmail","size","array_length","msg","remove","deleteTag","each","getShedule","slots_array","list_array","final_data_list","lastDate","add","rounds","getDates","dateArray","round","startDate","stopDate","week_of_month","currentDate","day","getTimeSlots","time_slots","shedule_time_slots","first_round_slots","second_round_slots","third_round_slots","check_slot_status","toISOString","substring","shedule_type","shedule_slots","shedule","slots","time","assignToOldTag","assignTag","mongoId","getTime","assignToNewTag","assignNewTag","getFetchedMailCount","imap_emails","imap_data","imap_email","active","createdAt","imap_server","password","server_port","port","updatedAt","fetched_email_count","fetched_mail_till","last_fetched_time","total_emails","days_left_to_fetched","app_get_candidate","scheduled_rounds","info","findTagInfo","tagInfo","name","job_description","office_location","app_hr_contact_email","app_hr_contact_number","job_title","checkEmailStatus","flag","email_data","findEmailByDates","days","fetched_date_till","catch","sendToNotReplied","sender_mail_array","sender_mail_data","$not","send_template_count","$lte","$ne","not_replied","no_of_candidate","sendBySelection","selectedCandidate","insert_note","$each","note","assignee","update_note","note_date","note_time","nModified","cron_status","findCronStatus","findPendingCandidate","pending_candidate_status","send_to_all_status","notRepliedCandidate","pending_candidate","archiveEmails","source","target","insertMany","write_reponse"],"mappings":"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","file":"emailprocess.js","sourcesContent":["import * as _ from \"lodash\";\nimport db from \"../db\";\nimport constant from \"../models/constant\";\nimport mail from \"../modules/mail\";\nimport replaceData from \"../modules/replaceVariable\";\nimport imap from \"../service/imap\";\nimport Attachment from \"../modules/getAttachment\";\nimport moment from 'moment';\nimport pushMessage from '../service/pushmessage';\nimport crypto from \"crypto\";\nimport logs from \"../service/emaillogs\";\nimport slack from '../service/sendSlackNotification';\n\nconst fetchEmail = (page, tag_id, limit, type, keyword, selected, default_id, default_tag, db, is_attach) => {\n    return new Promise((resolve, reject) => {\n        let message;\n        let default_tag_id = []\n        _.forEach(default_tag, (val, key) => {\n            default_tag_id.push(val.id.toString())\n        })\n        let where = '';\n        if (!page || !isNaN(page) == false || page <= 0) {\n            page = 1;\n        }\n        if ((type == \"email\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n            where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' } }\n        } else if ((type == \"subject\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n            where = { 'subject': { \"$regex\": keyword, '$options': 'i' } }\n        } else if ((type == \"email\") && (selected == true) && ((!isNaN(tag_id) == false))) {\n            if (default_id) {\n                where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id }\n            } else {\n                if (!is_attach) {\n                    where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                } else {\n                    where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true }\n                }\n            }\n        } else if ((type == \"subject\") && (selected == true) && (!isNaN(tag_id) == false)) {\n            if (default_id) {\n                where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id }\n            } else {\n                if (!is_attach) {\n                    where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                } else {\n                    where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true }\n                }\n            }\n        } else\n        if ((type == \"email\") && tag_id) {\n            if (default_tag_id.indexOf(default_id) >= 0) {\n                where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id }\n            } else {\n                where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\" }\n            }\n        } else if ((type == \"subject\") && tag_id) {\n            if (default_tag_id.indexOf(default_id) >= 0) {\n                where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id }\n            } else {\n                where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\" }\n            }\n        } else if (!tag_id || !isNaN(tag_id) == false || tag_id <= 0) {\n            if (!is_attach) {\n                where = { tag_id: { $size: 0 }, is_attachment: 0 };\n            } else {\n                where = { tag_id: { $size: 0 }, is_attachment: 1 };\n            }\n        } else {\n            if (default_tag_id.indexOf(default_id) >= 0) {\n                where = { default_tag: default_id, tag_id: { $in: [tag_id] } }\n            } else if (default_tag_id.indexOf(tag_id) >= 0) {\n                where = { default_tag: tag_id }\n            } else {\n                where = { tag_id: { $in: [tag_id] }, default_tag: \"\" }\n            }\n        }\n        db.find(where, { \"_id\": 1, \"date\": 1, \"email_date\": 1, \"is_automatic_email_send\": 1, \"from\": 1, \"sender_mail\": 1, \"subject\": 1, \"unread\": 1, \"attachment\": 1, \"tag_id\": 1, \"is_attachment\": 1, \"default_tag\": 1, \"mobile_no\": 1 }, { sort: { date: -1 } }).skip((page - 1) * parseInt(limit)).limit(parseInt(limit)).exec((err, data) => {\n            if (err) {\n                console.log(err)\n                reject(err);\n            } else {\n                resolve(data, message);\n            }\n        });\n    })\n}\n\n\nconst findcount = (mongodb) => {\n    return new Promise((resolve, reject) => {\n        let count1 = [];\n        let tagId = [];\n        let mails_unread_count = 0;\n        let mails_total_count = 0;\n        let sub_child_list = [];\n        let candidate_list = [];\n        let final_data = [];\n        db.Tag.findAll({ where: { type: constant().tagType.automatic, is_job_profile_tag: 0 } })\n            .then((tags) => {\n                _.forEach(tags, (val, key) => {\n                    tagId.push(val)\n                })\n                db.Tag.findAll({\n                        where: { type: constant().tagType.automatic, is_job_profile_tag: 1 },\n                        order: '`priority` ASC'\n                    })\n                    .then((candidate) => {\n                        _.forEach(candidate, (val, key) => {\n                            candidate_list.push(val)\n                        })\n                        mongodb.find({ tag_id: [], is_attachment: false }, { tag_id: 1, default_tag: 1, unread: 1 }).exec(function(err, result) {\n                            mails_total_count = result.length;\n                            _.forEach(result, (val, key) => {\n                                if (val.unread === true) {\n                                    mails_unread_count++;\n                                }\n                            })\n                            findCount(tagId, function(data) {\n                                findAttachmentMailsCount(function(attachment_count) {\n                                    data.push(attachment_count)\n                                    count1 = []\n                                    let mails = { title: \"Mails\", id: 0, unread: mails_unread_count, count: mails_total_count, type: constant().tagType.automatic }\n                                    data.push(mails)\n                                    let default_id1 = [];\n                                    _.forEach(data, (val, key) => {\n                                        delete val.subchild\n                                        final_data.push(val)\n                                    })\n                                    db.Tag.findAll({ where: { type: constant().tagType.default } })\n                                        .then((default_tag) => {\n                                            _.forEach(default_tag, (val, key) => {\n                                                if (val.title != constant().tagType.genuine) {\n                                                    default_id1.push(val);\n                                                }\n                                            })\n                                            findCount(candidate_list, function(data1) {\n                                                let array = [{ title: \"candidate\", data: data1 }, { title: \"inbox\", data: final_data }]\n                                                resolve({ data: array })\n                                            })\n                                        })\n                                })\n                            })\n                        })\n                    })\n            })\n\n        function findAttachmentMailsCount(callback) {\n            mongodb.find({ tag_id: [], is_attachment: true }, { tag_id: 1, default_tag: 1, unread: 1 }).exec(function(err, result) {\n                let attachment_mail_total_count = result.length;\n                let attachment_mail_unread_count = 0;\n                if (attachment_mail_total_count) {\n                    _.forEach(result, (val, key) => {\n                        if (val.unread === true) {\n                            attachment_mail_unread_count++;\n                        }\n                        if (key == result.length - 1) {\n                            callback({ title: \"Attachment\", id: null, unread: attachment_mail_unread_count, count: attachment_mail_total_count, type: constant().tagType.automatic })\n                        }\n                    })\n                } else {\n                    callback({ title: \"Attachment\", id: null, unread: attachment_mail_unread_count, count: attachment_mail_total_count, type: constant().tagType.automatic })\n                }\n            })\n        }\n\n        function findDefaultCount(default_tag_id, callback) {\n            if (default_tag_id.length == 0) {\n                callback(final_data)\n            } else {\n                let id1 = default_tag_id.splice(0, 1)[0];\n                mongodb.find({ default_tag: id1.id }).exec(function(err, result1) {\n                    let unread = 0;\n                    _.forEach(result1, (val, key) => {\n                        if (val.unread === true) {\n                            unread++;\n                        }\n                    })\n                    let default_tag_data = {\n                        id: id1.id,\n                        color: id1.color,\n                        type: id1.type,\n                        title: id1.title,\n                        count: result1.length,\n                        unread: unread,\n                    }\n                    final_data.push(default_tag_data)\n                    if (default_tag_id.length) {\n                        findDefaultCount(default_tag_id, callback)\n                    } else {\n                        callback(final_data)\n                    }\n                })\n            }\n        }\n\n        function findCount(tag_id, callback) {\n            if (tag_id.length == 0) {\n                callback(count1)\n            } else {\n                let tagId = tag_id.splice(0, 1)[0]\n                mongodb.find({ tag_id: { \"$in\": [tagId.id.toString()] }, default_tag: \"\" }, { tag_id: 1, default_tag: 1, unread: 1 }).exec(function(err, result) {\n                    let unread = 0\n                    _.forEach(result, (val, key) => {\n                        if (val.unread === true) {\n                            unread++;\n                        }\n                    })\n                    sub_child_list = []\n                    db.Tag.findAll({ where: { type: constant().tagType.default }, order: '`default_id` ASC' })\n                        .then((default_tag_list) => {\n                            find_child_count(tagId, default_tag_list, function(response) {\n                                response.id = tagId.id;\n                                response.title = tagId.title;\n                                response.type = tagId.type;\n                                response.color = tagId.color;\n                                response.count = result.length;\n                                response.unread = unread;\n                                response.subchild.unshift({ id: tagId.id, title: \"All\", color: tagId.color, count: result.length, unread: unread })\n                                count1.push(response)\n                                if (tag_id.length) {\n                                    findCount(tag_id, callback)\n                                } else {\n                                    callback(count1)\n                                }\n                            })\n                        })\n\n                })\n            }\n        }\n\n        function find_child_count(tagId, default_tag_list, callback) {\n            let default_tag_id = default_tag_list.splice(0, 1)[0]\n            mongodb.find({ tag_id: { \"$in\": [tagId.id.toString()] }, default_tag: default_tag_id.id }).exec(function(err, default_tag_mail) {\n                let child = {\n                    id: default_tag_id.id,\n                    color: default_tag_id.color,\n                    title: default_tag_id.title,\n                    count: 0,\n                    unread: 0,\n                    parent_id: default_tag_id.parent_id,\n                    type: default_tag_id.type\n                }\n                if (default_tag_mail.length) {\n                    child.count = default_tag_mail.length\n                    let unread = 0\n                    _.forEach(default_tag_mail, (val, key) => {\n                        if (val.unread === true) {\n                            unread++;\n                        }\n                    })\n                    child.unread = unread\n                }\n                if (child.parent_id != tagId.id && child.parent_id != null) {\n                    // sub_child_list.push(child)\n                } else {\n                    sub_child_list.push(child)\n                }\n                if (default_tag_list.length) {\n                    find_child_count(tagId, default_tag_list, callback)\n                } else {\n                    let tagData = {\n                        subchild: sub_child_list\n                    }\n                    callback(tagData)\n                }\n\n            })\n        }\n    })\n}\n\nlet assignMultiple = (tag_id, body, email) => {\n    return new Promise((resolve, reject) => {\n        let where;\n        db.Tag.findOne({\n                where: {\n                    id: tag_id\n                }\n            })\n            .then((data) => {\n                if (data.id) {\n                    if (data.type == constant().tagType.default && body.shedule_for) {\n                        if (body.shedule_for == constant().shedule_for[0].value) {\n                            var registration_id = Math.floor((Math.random() * 1000 * 1000) + Math.random() * 10000);\n                            where = { \"default_tag\": tag_id.toString(), \"shedule_for\": body.shedule_for, \"shedule_date\": body.shedule_date, \"shedule_time\": body.shedule_time, \"registration_id\": registration_id, mobile_no: body.mobile_no, updated_time: new Date(), send_template: body.tamplate_id }\n                        } else {\n                            where = { \"default_tag\": tag_id.toString(), \"shedule_for\": body.shedule_for, \"shedule_date\": body.shedule_date, \"shedule_time\": body.shedule_time, mobile_no: body.mobile_no, updated_time: new Date(), send_template: body.tamplate_id }\n                        }\n                    } else if (data.type == constant().tagType.default) {\n                        where = { \"default_tag\": tag_id.toString(), \"shedule_for\": \"\", \"shedule_date\": \"\", \"shedule_time\": \"\", updated_time: new Date() };\n                    } else {\n                        where = { \"$addToSet\": { \"tag_id\": tag_id.toString() }, updated_time: new Date() };\n                    }\n                    email.update({ \"_id\": { \"$in\": body.mongo_id } }, where, { multi: true }).exec((err) => {\n                        if (err) {\n                            reject(err);\n                        } else {\n                            if (data.type == constant().tagType.default && body.shedule_for) {\n                                email.findOne({ \"_id\": { \"$in\": body.mongo_id } }, { \"attachment\": 1, \"sender_mail\": 1, \"default_tag\": 1, \"from\": 1, \"tag_id\": 1, \"registration_id\": 1, \"from\": 1 }).exec(function(err, response) {\n                                    db.Template.findById(body.tamplate_id)\n                                        .then((template) => {\n                                            replaceData.schedule_filter(template.body, response.from, response.tag_id[response.tag_id.length - 1], body.scheduled_date, body.scheduled_time)\n                                                .then((replaced_data) => {\n                                                    if (body.shedule_for == constant().shedule_for[0].value)\n                                                        replaced_data = replaced_data + constant().registration_message + registration_id\n                                                    db.Smtp.findOne({ where: { status: 1 } })\n                                                        .then((smtp) => {\n                                                            if (!smtp) {\n                                                                resolve({\n                                                                    status: 1,\n                                                                    message: \"Interview is sheduled but email is not send\",\n                                                                    data: response\n                                                                })\n                                                            }\n                                                            template.subject += \" On Dated \" + body.shedule_date + \" At \" + body.shedule_time;\n                                                            let custom_link = constant().app_custom_link + response.registration_id || registration_id;\n                                                            replaced_data += custom_link;\n                                                            mail.sendScheduledMail(response.sender_mail, template.subject, \"\", smtp, replaced_data)\n                                                                .then((mail_response) => {\n                                                                    db.Tag.findById(parseInt(response.tag_id[0])).then((tag_info) => {\n                                                                        let link = response.attachment[0] ? response.attachment[0].link : \"No Attachment\";\n                                                                        let slack_message = constant().slack_message + \"\\n\" + \"Job Profile: \" + tag_info.title + \"\\n\" + \"Candidate Name: \" + response.from + \"\\n\" + \" On Dated \" + body.shedule_date + \" At \" + body.shedule_time + \"\\n\" + \"Cv: \" + link;\n                                                                        slack.slackNotification(slack_message, response.sender_mail).then((response) => {\n                                                                            db.Candidate_device.findOne({ where: { email_id: response.sender_mail } })\n                                                                                .then((device_list) => {\n                                                                                    if (device_list) {\n                                                                                        let push_message = \"\";\n                                                                                        _.forEach(constant().shedule_for, (val, key) => {\n                                                                                            if (val.value == body.shedule_for) {\n                                                                                                push_message = val.text + \" on \" + moment(body.shedule_date).format(\"MMM DD, YYYY\") + \" at \" + body.shedule_time;\n                                                                                            }\n                                                                                        })\n                                                                                        pushMessage.pushMessage(device_list, push_message)\n                                                                                            .then((push_response) => {\n                                                                                                if (!push_response.error) {\n                                                                                                    email.update({ \"_id\": { \"$in\": body.mongo_id } }, { \"$addToSet\": { \"push_message\": constant().push_notification_message + \" \" + body.shedule_for }, \"push_status\": 1 }, { multi: true }).exec(function(err, saved_info) {\n                                                                                                        resolve({\n                                                                                                            status: 1,\n                                                                                                            message: \"success\",\n                                                                                                            data: response,\n                                                                                                            push_status: push_response,\n                                                                                                            email_status: mail_response\n                                                                                                        });\n                                                                                                    })\n                                                                                                } else {\n                                                                                                    resolve({\n                                                                                                        status: 1,\n                                                                                                        message: \"success\",\n                                                                                                        data: response,\n                                                                                                        push_status: push_response,\n                                                                                                        email_status: mail_response\n                                                                                                    });\n                                                                                                }\n                                                                                            })\n                                                                                    } else {\n                                                                                        resolve({\n                                                                                            status: 1,\n                                                                                            message: \"success\",\n                                                                                            data: response,\n                                                                                            email_status: mail_response\n                                                                                        })\n                                                                                    }\n                                                                                }, (err) => { reject(err) })\n\n                                                                        }, (err) => { reject(err) })\n                                                                    })\n                                                                })\n                                                        })\n                                                })\n\n                                        })\n                                })\n                            } else {\n                                resolve({\n                                    status: 1,\n                                    message: \"success\",\n                                    email_status: { status: 0 }\n                                });\n                            }\n                        }\n                    });\n                } else {\n                    reject(\"invalid tag id\");\n                }\n            })\n    })\n}\n\nlet fetchById = (type, keyword, selected, default_id, tag_id, is_attach) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.findAll({ where: { type: constant().tagType.default } })\n            .then((default_tag) => {\n                let default_tag_id = []\n                _.forEach(default_tag, (val, key) => {\n                    default_tag_id.push(val.id.toString())\n                })\n                let where = \"\"\n                if ((type == \"email\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n                    where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' } }\n                } else if ((type == \"subject\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n                    where = { 'subject': { \"$regex\": keyword, '$options': 'i' } }\n                } else if ((type == \"email\") && (selected == true) && ((!isNaN(tag_id) == false))) {\n                    if (default_id) {\n                        where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id }\n                    } else {\n                        if (!is_attach) {\n                            where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                        } else {\n                            where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true }\n                        }\n                    }\n                } else if ((type == \"subject\") && (selected == true) && (!isNaN(tag_id) == false)) {\n                    if (default_id) {\n                        where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id }\n                    } else {\n                        if (!is_attach) {\n                            where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                        } else {\n                            where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true }\n                        }\n                    }\n                } else\n                if ((type == \"email\") && tag_id) {\n                    if (default_tag_id.indexOf(default_id) >= 0) {\n                        where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id }\n                    } else {\n                        where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\" }\n                    }\n                } else if ((type == \"subject\") && tag_id) {\n                    if (default_tag_id.indexOf(default_id) >= 0) {\n                        where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id }\n                    } else {\n                        where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\" }\n                    }\n                } else if (!tag_id || !isNaN(tag_id) == false || tag_id <= 0) {\n                    if (!is_attach) {\n                        where = { tag_id: { $size: 0 }, is_attachment: 0 };\n                    } else {\n                        where = { tag_id: { $size: 0 }, is_attachment: 1 };\n                    }\n                } else {\n                    if (default_tag_id.indexOf(default_id) >= 0) {\n                        where = { default_tag: default_id, tag_id: { $in: [tag_id] } }\n                    } else if (default_tag_id.indexOf(tag_id) >= 0) {\n                        where = { default_tag: tag_id }\n                    } else {\n                        where = { tag_id: { $in: [tag_id] }, default_tag: \"\" }\n                    }\n                }\n                resolve(where)\n            })\n    })\n}\n\nlet sendToMany = (req, email_list, subject, body, tag_id, default_id, email) => {\n    return new Promise((resolve, reject) => {\n        let where;\n        let emails = [];\n        if (tag_id && default_id) {\n            where = { \"tag_id\": { \"$in\": [tag_id.toString()] }, \"default_tag\": default_id.toString() };\n        } else {\n            where = { tag_id: { \"$in\": [tag_id.toString()] }, \"default_tag\": \"\" };\n        }\n        if (tag_id) {\n            email.find({ \"$and\": [where] }).exec(function(err, data) {\n                _.forEach(data, (val, key) => {\n                    emails.push(val.sender_mail)\n                    if (key == data.length - 1) {\n                        let data = new req.cronWork({ body: req.body.body, tag_id: tag_id.toString(), subject: req.body.subject, user: req.user.email, candidate_list: emails, status: 1, work: constant().sendToAll, template_id: req.body.template_id })\n                        data.save(function(err, response) {\n                            resolve(response)\n                        })\n                    }\n                })\n            })\n        }\n    })\n}\n\nlet sendToSelectedTag = (req, id, email) => {\n    return new Promise((resolve, reject) => {\n        let email_send_success_list = [];\n        let email_send_fail_list = [];\n        db.Tag.findById(id)\n            .then((data) => {\n                if (data) {\n                    db.Template.findById(data.template_id)\n                        .then((template) => {\n                            if (template) {\n                                email.find({ 'tag_id': { $in: [id.toString()] }, \"$or\": [{ is_automatic_email_send: 0 }, { is_automatic_email_send: { \"$exists\": false } }] }, { \"_id\": 1, \"sender_mail\": 1, \"from\": 1, \"subject\": 1, \"tag_id\": 1 }).exec(function(err, result) {\n                                    let data = new req.cronWork({ tag_id: id.toString(), candidate_list: result, template_id: template.id, user: req.user.email, work: constant().pending_work, status: 1 });\n                                    data.save(function(err, response) {\n                                        if (err) {\n                                            reject(err)\n                                        } else {\n                                            resolve({ status: 0, message: \"Send email to pending candidate is started..\", data: [] });\n                                        }\n                                    })\n                                })\n                            } else {\n                                reject(\"No template found\")\n                            }\n                        })\n                } else {\n                    reject(\"Invalid Tag id\")\n                }\n            })\n    })\n}\n\nlet mailAttachment = (mongo_id, email) => {\n    return new Promise((resolve, reject) => {\n        email.findOne({ _id: mongo_id }, (error, data) => {\n            if (error) {\n                reject(error)\n            } else {\n                if (data) {\n                    let to = data.get(\"imap_email\");\n                    let uid = data.get(\"uid\");\n                    if (to && uid) {\n                        db.Imap.findOne({ where: { email: to } })\n                            .then((data) => {\n                                imap.imapCredential(data)\n                                    .then((imap) => {\n                                        Attachment.getAttachment(imap, uid)\n                                            .then((response) => {\n                                                email.findOneAndUpdate({ _id: mongo_id }, { $set: { attachment: response } }, { new: true }, (err, response) => {\n                                                    if (err) {\n                                                        resolve({ status: 0, message: err });\n                                                    } else {\n                                                        resolve({ status: 1, message: \" attachment save successfully\", data: response });\n                                                    }\n                                                });\n                                            })\n\n                                    })\n\n                            })\n\n                    } else {\n                        resolve({ status: 0, message: 'data not found in database' });\n                    }\n                } else {\n                    resolve({ status: 0, message: 'mongo_id not found in database' });\n                }\n            }\n        })\n    })\n}\n\nlet deleteEmail = (tag_id, mongo_id, email) => {\n    return new Promise((resolve, reject) => {\n        let response = [];\n        let size = _.size(mongo_id);\n        _.forEach(mongo_id, (val, key) => {\n            email.findOneAndUpdate({ \"_id\": val }, { \"$pull\": { \"tag_id\": tag_id } }, { new: true }).exec((err, data) => {\n                if (err) {\n                    response.push({ status: 0, message: err, array_length: key });\n                }\n                if (!data) {\n                    response.push({ status: 0, msg: \"not found\", array_length: key });\n                } else {\n                    if (!_.size(data.tag_id)) {\n                        data.remove();\n                    }\n                    response.push({ status: 1, msg: \"delete success\", array_length: key });\n                }\n                if (key == (mongo_id.length - 1)) {\n                    resolve({ status: 1, message: \"success\", data: response });\n                }\n            });\n        });\n    })\n}\n\nlet deleteTag = (tag_id, mongo_id, email) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.findOne({ where: { id: tag_id } })\n            .then((data) => {\n                if (data.id) {\n                    _.each(mongo_id, (val, key) => {\n                        email.findOneAndUpdate({ \"_id\": val }, { \"$pull\": { \"tag_id\": tag_id } }).exec((err) => {\n                            if (err) {\n                                reject(err);\n                            } else {\n                                if (key == (_.size(mongo_id) - 1)) {\n                                    resolve({ status: 1, message: \"success\" });\n                                }\n                            }\n                        });\n                    });\n                } else {\n                    reject(\"invalid tag id\");\n                }\n            })\n    })\n}\n\nlet getShedule = (email) => {\n    return new Promise((resolve, reject) => {\n        let slots_array = [];\n        let list_array = [];\n        let final_data_list = {}\n        let lastDate = moment(new Date()).add(1, 'months');\n        let rounds = []\n        getDates(moment(new Date()).add(1, 'days'), lastDate, function(dateArray) {\n            _.forEach(constant().shedule_for, (val, key) => {\n                rounds.push({ round: val.text });\n                if (key == constant().shedule_for.length - 1) {\n                    dateArray[0]['rounds'] = rounds\n                    resolve(dateArray)\n                }\n            })\n        })\n\n        function getDates(startDate, stopDate, callback) {\n            let week_of_month = [1, 2, 3, 4, 5]\n            let currentDate = moment(startDate);\n            stopDate = moment(stopDate);\n            if (!(moment(currentDate).day() == 6 && !(week_of_month[0 | moment(currentDate).date() / 7] % 2))) {\n                if (!moment(currentDate).day() == 0) {\n                    getTimeSlots(currentDate, function(time_slots) {\n                        currentDate = moment(currentDate).add(1, 'days');\n                        if (startDate <= stopDate) {\n                            getDates(currentDate, stopDate, callback)\n                        } else {\n                            callback(time_slots);\n                        }\n                    })\n                } else {\n                    currentDate = moment(currentDate).add(1, 'days');\n                    getDates(currentDate, stopDate, callback)\n                }\n            } else {\n                currentDate = moment(currentDate).add(1, 'days');\n                getDates(currentDate, stopDate, callback)\n            }\n        }\n\n        function getTimeSlots(currentDate, callback) {\n            slots_array = []\n            final_data_list = {}\n            let shedule_for = constant().shedule_for;\n            let shedule_time_slots = [constant().first_round_slots, constant().second_round_slots, constant().third_round_slots];\n            check_slot_status(shedule_for, shedule_time_slots, currentDate, function(response) {\n                list_array.push({ date: currentDate.toISOString().substring(0, 10), time_slots: response })\n                callback(list_array)\n            })\n\n        }\n\n\n        function check_slot_status(shedule_type, shedule_slots, date, callback) {\n            let shedule = shedule_type.splice(0, 1)[0]\n            let slots = shedule_slots.splice(0, 1)[0]\n            email.find({ shedule_date: date.toISOString().substring(0, 10), shedule_for: shedule.value }, { \"shedule_time\": 1 }).exec(function(err, shedule_time) {\n                if (shedule_time.length) {\n                    let time = []\n                    _.forEach(shedule_time, (val, key) => {\n                        time.push(val.shedule_time)\n                    })\n                    _.forEach(slots, (val, key) => {\n                        if (time.indexOf(val) >= 0) {\n                            slots_array.push({ time: time[time.indexOf(val)], status: 0 })\n                        } else {\n                            slots_array.push({ time: val, status: 1 })\n                        }\n                        if (key == slots.length - 1) {\n                            final_data_list[shedule.value] = slots_array;\n                            if (shedule_type.length) {\n                                slots_array = []\n                                check_slot_status(shedule_type, shedule_slots, date, callback)\n                            } else {\n                                final_data_list[shedule.value] = slots_array;\n                                callback(final_data_list)\n                            }\n                        }\n                    })\n                } else {\n                    _.forEach(slots, (val, key) => {\n                        slots_array.push({ time: val, status: 1 })\n                        if (key == slots.length - 1) {\n                            final_data_list[shedule.value] = slots_array;\n                            if (shedule_type.length) {\n                                slots_array = []\n                                check_slot_status(shedule_type, shedule_slots, date, callback)\n                            } else {\n                                final_data_list[shedule.value] = slots_array;\n                                callback(final_data_list)\n                            }\n                        }\n                    })\n                }\n            })\n\n        }\n    });\n}\n\nlet assignToOldTag = (data, email) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.assignTag(data, email)\n            .then((response) => {\n                function assignTag(id) {\n                    let mongoId = id.splice(0, 100)\n                    email.update({ _id: { $in: mongoId } }, { \"$addToSet\": { \"tag_id\": data.id.toString() }, \"email_timestamp\": new Date().getTime() }, { multi: true })\n                        .then((data1) => {\n                            if (!id.length) {\n                                resolve({ message: \"tag assigned sucessfully\" })\n                            } else {\n                                assignTag(id)\n                            }\n                        })\n                }\n                assignTag(response)\n            }, (err) => {\n                reject(err)\n            });\n    })\n}\n\nlet assignToNewTag = (data, email) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.assignNewTag(data, email)\n            .then((response) => {\n                function assignTag(id) {\n                    let mongoId = id.splice(0, 100)\n                    email.update({ _id: { $in: mongoId } }, { \"default_tag\": data.id.toString(), \"email_timestamp\": new Date().getTime() }, { multi: true })\n                        .then((data1) => {\n                            if (!id.length) {\n                                resolve({ message: \"tag assigned sucessfully\" })\n                            } else {\n                                assignTag(id)\n                            }\n                        })\n                }\n                assignTag(response)\n            }, (err) => {\n                reject(err)\n            });\n    })\n}\n\nlet getFetchedMailCount = (imap_emails, email) => {\n    return new Promise((resolve, reject) => {\n        let result = []\n        findCount(imap_emails, function(data) {\n            resolve(result)\n        })\n\n        function findCount(emails, callback) {\n            let imap_data = \"\";\n            let imap_email = emails.splice(0, 1)[0]\n            if (!imap_email) {\n                callback({})\n            } else {\n                email.find({ imap_email: imap_email.email }).count().exec(function(err, data) {\n                    imap_data = {\n                        active: imap_email.active,\n                        createdAt: imap_email.createdAt,\n                        email: imap_email.email,\n                        id: imap_email.id,\n                        imap_server: imap_email.imap_server,\n                        password: imap_email.password,\n                        server_port: imap_email.port,\n                        status: imap_email.status,\n                        type: imap_email.type,\n                        updatedAt: imap_email.updatedAt,\n                        fetched_email_count: data,\n                        fetched_mail_till: moment(imap_email.last_fetched_time).format(\"DD,MM,YYYY\"),\n                        total_emails: imap_email.total_emails,\n                        days_left_to_fetched: imap_email.days_left_to_fetched\n                    }\n                    result.push(imap_data)\n                    if (emails.length) {\n                        findCount(emails, callback)\n                    } else {\n                        callback(result)\n                    }\n                })\n            }\n        }\n    })\n}\n\nlet app_get_candidate = (email, registration_id) => {\n    return new Promise((resolve, reject) => {\n        let rounds = []\n        let scheduled_rounds = []\n        _.forEach(constant().shedule_for, (val, key) => {\n            scheduled_rounds.push(val.value)\n        })\n        email.findOne({ shedule_for: { \"$in\": scheduled_rounds }, registration_id: registration_id }, { \"from\": 1, \"tag_id\": 1, \"shedule_date\": 1, \"shedule_time\": 1, \"shedule_for\": 1, \"push_message\": 1, \"push_status\": 1, \"registration_id\": 1, \"sender_mail\": 1, \"mobile_no\": 1 }).exec(function(err, response) {\n            if (err) {\n                reject({ error: 1, message: \"Invalid Registration Number\", data: [] })\n            } else {\n                if (response) {\n                    _.each(constant().shedule_for, (val, key) => {\n                        rounds.push((val.value == response.shedule_for) ? { text: val.text, info: val.info, scheduled_time: response.shedule_time, scheduled_date: moment(response.shedule_date).format(\"MMM DD, YYYY\"), status: 1 } : { text: val.text, info: val.info, scheduled_time: \"\", scheduled_date: \"\", status: 0 })\n                        if (key == constant().shedule_for.length - 1 || (val.value == response.shedule_for)) {\n                            db.Tag.findTagInfo(response.tag_id[0])\n                                .then((tagInfo) => {\n                                    resolve({ name: response.from, mobile_no: response.mobile_no || null, email: response.sender_mail, subject: tagInfo.subject, job_description: tagInfo.job_description, rounds: rounds, push_message: response.push_message, push_status: response.push_status, registration_id: response.registration_id, office_location: constant().office_location, app_hr_contact_email: constant().app_hr_contact_email, app_hr_contact_number: constant().app_hr_contact_number, job_title: tagInfo.title })\n                                }, (error) => { reject(error) })\n                            return false\n                        }\n                    })\n                } else {\n                    reject({ error: 1, message: \"Invalid Registration Number\", data: [] })\n                }\n            }\n        })\n    })\n}\n\nlet checkEmailStatus = (req) => {\n    return new Promise((resolve, reject) => {\n        let rounds = [];\n        let flag = 0\n        _.forEach(constant().shedule_for, (val, key) => {\n            rounds.push(val.value)\n        })\n        req.email.findOne({ sender_mail: req.body.email, tag_id: req.body.tag_id.toString(), shedule_for: { $in: rounds } }, { \"shedule_for\": 1 }).exec(function(err, email_data) {\n            if (err) {\n                reject(err)\n            } else if (!email_data) {\n                flag++\n            } else if (email_data._id == req.body.mongo_id) {\n                flag++\n            }\n            resolve({ flag: flag, message: flag ? \"\" : \"Candidate is Already Scheduled\" })\n        })\n    })\n}\n\nlet findEmailByDates = (days) => {\n    return new Promise((resolve, reject) => {\n        db.Imap.update({ fetched_date_till: new Date(), days_left_to_fetched: days }, { where: { active: 1 } }).then((data) => {\n            resolve(data)\n        }).catch((err) => {\n            reject(err)\n        })\n    })\n}\n\nlet sendToNotReplied = (req) => {\n    return new Promise((resolve, reject) => {\n        let sender_mail_array = []\n        db.Tag.findOne({ where: { title: constant().tagType.genuine } }).then((default_tag) => {\n            req.email.find({ tag_id: req.body.tag_id, default_tag: default_tag.id.toString() }, { sender_mail: 1 }).then((sender_mail_data) => {\n                _.forEach(sender_mail_data, (val, key) => {\n                    sender_mail_array.push(val.sender_mail)\n                    if (key == sender_mail_data.length - 1) {\n                        req.email.find({ tag_id: req.body.tag_id.toString(), sender_mail: { $not: { $in: sender_mail_array } }, default_tag: \"\", \"$or\": [{ send_template_count: { \"$exists\": false } }, { send_template_count: { $lte: 3 } }], template_id: { $ne: parseInt(req.body.template_id) } }, { sender_mail: 1, from: 1 }).then((candidate_list) => {\n                            let data = new req.cronWork({ body: req.body.body, subject: req.body.subject, user: req.user.email, tag_id: req.body.tag_id, default_tag: req.body.default_tag, candidate_list: candidate_list, status: 1, work: constant().not_replied, template_id: req.body.template_id })\n                            data.save(function(err, response) {\n                                resolve({ no_of_candidate: candidate_list.length, message: \"CronWork Is Started...\" })\n                            })\n                        })\n                    }\n                })\n            })\n        })\n    });\n}\n\nlet sendBySelection = (req) => {\n    return new Promise((resolve, reject) => {\n        let sender_mail_array = []\n        let data = new req.cronWork({ body: req.body.body, subject: req.body.subject, user: req.user.email, candidate_list: req.body.emails, status: 1, work: constant().selectedCandidate, template_id: req.body.template_id })\n        data.save(function(err, response) {\n            resolve({ no_of_candidate: req.body.emails.length, message: \"CronWork Is Started...\" })\n        })\n    })\n}\n\nlet insert_note = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.update({ \"_id\": req.body.mongo_id }, { \"$push\": { \"notes\": { $each: [{ note: req.body.note, date: moment(new Date()).format(\"DD-MM-YYYY\"), time: moment(new Date()).format(\"hh:mm:ss a\"), assignee: req.user.email }] } } }).exec(function(err, result) {\n            if (err) {\n                reject(err)\n            } else {\n                resolve({ error: 0, message: \"Note inserted\", response: result })\n            }\n        })\n    })\n}\n\nlet update_note = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.update({ \"_id\": req.body.mongo_id, \"notes.date\": req.body.note_date, \"notes.time\": req.body.note_time }, { $set: { \"notes.$.note\": req.body.note, \"notes.$.date\": moment(new Date()).format(\"DD-MM-YYYY\"), \"notes.$.time\": moment(new Date()).format(\"hh:mm:ss a\") } }).exec(function(err, result) {\n            if (err) {\n                reject(err)\n            } else {\n                if (result.nModified) {\n                    resolve({ error: 0, message: \"Note updated\" })\n                } else {\n                    resolve({ error: 0, message: \"Note not found\" })\n                }\n            }\n        })\n    })\n}\n\nlet cron_status = (req) => {\n    return new Promise((resolve, reject) => {\n        findCronStatus(req.body, function(response) {\n            resolve(response)\n        })\n    })\n\n    function findCronStatus(data, callback) {\n        findPendingCandidate(data, function(pending_candidate_status) {\n            sendToAll(data, function(send_to_all_status) {\n                notRepliedCandidate(data, function(notRepliedCandidate) {\n                    let response = {\n                        pending_candidate_status: pending_candidate_status,\n                        send_to_all_status: send_to_all_status,\n                        notRepliedCandidate: notRepliedCandidate\n                    }\n                    callback(response)\n                })\n            })\n        })\n    }\n\n    function findPendingCandidate(data, callback) {\n        req.cronWork.find({ status: 1, work: constant().pending_work, tag_id: data.tag_id.toString }).then((pending_candidate) => {\n            let count = 0;\n            if (pending_candidate.length) {\n                _.forEach(pending_candidate, (val, key) => {\n                    count += val.get('candidate_list').length;\n                    if (key == pending_candidate.length - 1) {\n                        callback(count)\n                    }\n                })\n            } else {\n                callback(count)\n            }\n        })\n    }\n\n    function sendToAll(data, callback) {\n        req.cronWork.find({ status: 1, work: constant().sendToAll, tag_id: data.tag_id.toString }).then((pending_candidate) => {\n            let count = 0;\n            if (pending_candidate.length) {\n                let count = 0;\n                _.forEach(pending_candidate, (val, key) => {\n                    count += val.get('candidate_list').length;\n                    if (key == pending_candidate.length - 1) {\n                        callback(count)\n                    }\n                })\n            } else {\n                callback(count)\n            }\n        })\n    }\n\n    function notRepliedCandidate(data, callback) {\n        req.cronWork.find({ status: 1, work: constant().not_replied, tag_id: data.tag_id.toString }).then((pending_candidate) => {\n            let count = 0;\n            if (pending_candidate.length) {\n                _.forEach(pending_candidate, (val, key) => {\n                    count += val.get('candidate_list').length;\n                    if (key == pending_candidate.length - 1) {\n                        callback(count)\n                    }\n                })\n            } else {\n                callback(count)\n            }\n        })\n    }\n}\n\nlet archiveEmails = (body, source, target) => {\n    return new Promise((resolve, reject) => {\n        source.find({ tag_id: body.tag_id }).then((mails) => {\n            target.insertMany(mails).then((write_reponse) => {\n                source.remove({ tag_id: body.tag_id || [] }).then((response) => {\n                    resolve({ status: 1, message: \"All Emails are moved to Archived\" })\n                })\n            })\n        })\n    })\n}\n\n\nexport default {\n    fetchEmail,\n    findcount,\n    assignMultiple,\n    fetchById,\n    sendToMany,\n    sendToSelectedTag,\n    mailAttachment,\n    deleteEmail,\n    deleteTag,\n    getShedule,\n    assignToOldTag,\n    assignToNewTag,\n    getFetchedMailCount,\n    app_get_candidate,\n    checkEmailStatus,\n    findEmailByDates,\n    sendToNotReplied,\n    sendBySelection,\n    insert_note,\n    update_note,\n    cron_status,\n    archiveEmails\n}"]}