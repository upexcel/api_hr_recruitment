{"version":3,"sources":["../../src/middleware/auth.js"],"names":["AuthController","req","res","next","token","param","verify","err","docs","status","send","error","endTime","unix","loginTime","exp","User","findById","then","user","message","find","where","id","user_type","userType","admin","$or","hr","json","controller"],"mappings":"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","file":"auth.js","sourcesContent":["import moment from \"moment\";\nimport jwt from \"jsonwebtoken\";\nimport db from \"../db\";\nimport tag from \"../models/constant\";\n\nexport class AuthController {\n\n    // middleware for logged in users\n    requiresLogin(req, res, next) {\n        const token = req.param(\"accessToken\");\n        if (token) {\n            jwt.verify(token, \"secret_key\", (err, docs) => {\n                if (err) {\n                    next(res.status(401).send({ error: \"Invalid Token\" }));\n                } else {\n                    const endTime = moment().unix();\n                    const loginTime = docs.exp;\n                    if (loginTime > endTime) {\n                        req.token = docs.token;\n                        db.User.findById(req.token)\n                            .then((user) => {\n                                if (user) {\n                                    req.user = user;\n                                    next();\n                                } else {\n                                    next(res.status(400).send({ message: \"Invalid User Token\" }));\n                                }\n                            });\n                    }\n                }\n            });\n        } else {\n            next(res.status(400).send({ message: \"User is not logged in\" }));\n        }\n    }\n\n    requiresAdmin(req, res, next) {\n        const token = req.param(\"accessToken\");\n        if (token) {\n            jwt.verify(token, \"secret_key\", (err, docs) => {\n                if (err) {\n                    next(res.status(401).send({ message: \"Invalid Token\" }));\n                } else {\n                    const endTime = moment().unix();\n                    const loginTime = docs.exp;\n                    if (loginTime > endTime) {\n                        req.token = docs.token;\n                        db.User.find({ where: { id: req.token, user_type: tag().userType.admin } })\n                            .then((admin) => {\n                                if (admin) {\n                                    req.user = admin;\n                                    next();\n                                } else {\n                                    next(res.status(400).send({ message: \"You Are Not Authorized\" }));\n                                }\n                            });\n                    }\n                }\n            });\n        } else {\n            next(res.status(400).send({ message: \"User is not logged in\" }));\n        }\n    }\n\n    requiresAdminOrHr(req, res, next) {\n            const token = req.param(\"accessToken\");\n            if (token) {\n                jwt.verify(token, \"secret_key\", (err, docs) => {\n                    if (err) {\n                        next(res.status(401).send({ message: \"Invalid Token\" }));\n                    } else {\n                        const endTime = moment().unix();\n                        const loginTime = docs.exp;\n                        if (loginTime > endTime) {\n                            req.token = docs.token;\n\n                            db.User.find({\n                                    where: {\n                                        id: req.token,\n                                        $or: [{ user_type: tag().userType.admin }, { user_type: tag().userType.hr }]\n                                    }\n                                })\n                                .then((user) => {\n                                    if (user) {\n                                        req.user = user;\n                                        next();\n                                    } else {\n                                        next(res.status(400).send({\n                                            message: \"You Are Not Authorized\"\n                                        }));\n                                    }\n                                });\n                        }\n                    }\n                });\n            } else {\n                next(res.status(400).send({ message: \"User is not logged in\" }));\n\n            }\n        }\n        // verify token\n    verifyToken(req, res, next) {\n        var token = req.param(\"accessToken\");\n        if (token) {\n            jwt.verify(req.param(\"accessToken\"), \"secret_key\", function(err) {\n                if (err) {\n                    next(res.status(400).send({ status: false }));\n                } else {\n                    res.json({ status: true });\n                }\n            });\n        } else {\n            next(res.status(400).send({ message: \"Token Not Found\" }));\n        }\n\n    }\n}\n\nconst controller = new AuthController();\nexport default controller;\n"]}