{"version":3,"sources":["../../src/providers/EmailVariableProvider.js"],"names":["BaseProvider","save","model","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg"],"mappings":";;;;;;;;AAAA;;IAAYA,Y;;AACZ;;;;;;;;AAEA;AACA,IAAMC,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,gBAAxB;AAAA,WAA6C,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvFL,iBAAS,cAAT,EAAyB,+BAAzB,EAA0DM,QAA1D;AACAN,iBAAS,eAAT,EAA0B,gCAA1B,EAA4DM,QAA5D;AACAJ,yBAAiBK,IAAjB,CAAsB,UAACC,MAAD,EAAY;AAC9B,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHP,wBAAQH,IAAR;AACH;AACJ,SAND;AAOH,KAVyD,CAA7C;AAAA,CAAb;;+BAaOJ,Y;AACHC","file":"EmailVariableProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\n\n/* Provider for User Registration */\nconst save = (model, validate, body, validationResult) => new Promise((resolve, reject) => {\n    validate(\"variableCode\", \"variable Code cannot be empty\").notEmpty();\n    validate(\"variableValue\", \"variable Value cannot be empty\").notEmpty();\n    validationResult.then((result) => {\n        if (!result.isEmpty()) {\n            reject(result.array()[0].msg);\n        } else {\n            resolve(body);\n        }\n    });\n});\n\nexport default {\n    ...BaseProvider,\n    save,\n};\n"]}