{"version":3,"sources":["../../src/providers/SmtpProvider.js"],"names":["BaseProvider","save","model","validate","body","validationResult","Promise","resolve","reject","notEmpty","isInt","then","result","isEmpty","array","msg","changeStatus"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;AACA;;;;;;;;AAEA;;AAEA,IAAMC,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,gBAAxB,EAA6C;AACtD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,UAAT,EAAqB,0BAArB,EAAiDM,QAAjD;AACAN,iBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACAN,iBAAS,aAAT,EAAwB,6BAAxB,EAAuDM,QAAvD;AACAN,iBAAS,MAAT,EAAiB,sBAAjB,EAAyCM,QAAzC;AACAN,iBAAS,UAAT,EAAqB,0BAArB,EAAiDM,QAAjD;AACAN,iBAAS,aAAT,EAAwB,0CAAxB,EAAoEM,QAApE,GAA+EC,KAA/E;AACAL,yBAAiBM,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBL,uBAAOI,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHR,wBAAQH,IAAR;AACAI,uBAAO,uBAAP;AACH;AACJ,SAPD;AAQH,KAfM,CAAP;AAgBH,CAjBD;;AAmBA,IAAMQ,eAAe,SAAfA,YAAe,CAACd,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,gBAAxB,EAA6C;AAC9D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACAJ,yBAAiBM,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBL,uBAAOI,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHR,wBAAQH,IAAR;AACH;AACJ,SAND;AAOH,KATM,CAAP;AAUH,CAXD;kBAYe;AACXJ,8BADW;AAEXC,cAFW;AAGXe;AAHW,C","file":"SmtpProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport emailExistence from \"email-existence\";\n\n/* Provider for User Registration */\n\nconst save = (model, validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"username\", \"username cannot be empty\").notEmpty();\n        validate(\"email\", \"email cannot be empty\").notEmpty();\n        validate(\"smtp_server\", \"smtp_server cannot be empty\").notEmpty();\n        validate(\"type\", \"type cannot be empty\").notEmpty();\n        validate(\"password\", \"password cannot be empty\").notEmpty();\n        validate(\"server_port\", \"port cannot be empty and must be integer\").notEmpty().isInt();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                resolve(body);\n                reject(\"Invalid Email Details\")\n            }\n        });\n    });\n};\n\nconst changeStatus = (model, validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"email\", \"email cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                resolve(body);\n            }\n        });\n    });\n};\nexport default {\n    BaseProvider,\n    save,\n    changeStatus,\n};"]}