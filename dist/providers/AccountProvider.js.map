{"version":3,"sources":["../../src/providers/AccountProvider.js"],"names":["BaseProvider","updatePassword","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg","old_password","createHash","update","digest","new_password"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;AACA;;;;;;;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AACzD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,cAAT,EAAyB,8BAAzB,EAAyDM,QAAzD;AACAN,iBAAS,cAAT,EAAyB,8BAAzB,EAAyDM,QAAzD;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHV,qBAAKW,YAAL,GAAoB,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCb,KAAKW,YAAxC,EAAsDG,MAAtD,CAA6D,QAA7D,CAApB;AACAd,qBAAKe,YAAL,GAAoB,iBAAOH,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCb,KAAKe,YAAxC,EAAsDD,MAAtD,CAA6D,QAA7D,CAApB;AACAX,wBAAQH,IAAR;AACH;AACJ,SARD;AASH,KAZM,CAAP;AAaH,CAdD;kBAee;AACXH,8BADW;AAEXC;AAFW,C","file":"AccountProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport crypto from \"crypto\";\n\nconst updatePassword = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"old_password\", \"old_password cannot be empty\").notEmpty();\n        validate(\"new_password\", \"new_password cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                body.old_password = crypto.createHash(\"sha256\").update(body.old_password).digest(\"base64\");\n                body.new_password = crypto.createHash(\"sha256\").update(body.new_password).digest(\"base64\");\n                resolve(body);\n            }\n        });\n    });\n};\nexport default {\n    BaseProvider,\n    updatePassword\n};\n"]}