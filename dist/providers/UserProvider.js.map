{"version":3,"sources":["../../src/providers/UserProvider.js"],"names":["BaseProvider","create","model","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg","password","confirm_password","createHash","update","digest","login"],"mappings":";;;;;;;;AAAA;;;;AACA;;IAAYA,Y;;AACZ;;;;;;;;AAEA;AACA,IAAMC,SAAS,SAATA,MAAS,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,gBAAxB,EAA6C;AACxD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACAN,iBAAS,WAAT,EAAsB,2BAAtB,EAAmDM,QAAnD;AACAN,iBAAS,UAAT,EAAqB,0BAArB,EAAiDM,QAAjD;AACAN,iBAAS,kBAAT,EAA6B,kCAA7B,EAAiEM,QAAjE;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACA;AACH,aAHD,MAGO;AACH,oBAAIV,KAAKW,QAAL,IAAiBX,KAAKY,gBAA1B,EAA4C;AACxC,2BAAOZ,KAAKY,gBAAZ;AACAZ,yBAAKW,QAAL,GAAgB,iBAAOE,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCd,KAAKW,QAAxC,EAAkDI,MAAlD,CAAyD,QAAzD,CAAhB;AACAZ,4BAAQH,IAAR;AACH,iBAJD,MAIO;AACHI,2BAAO,sBAAP;AACH;AACJ;AACJ,SAbD;AAcH,KAnBM,CAAP;AAoBH,CArBD;;AAuBA;AACA,IAAMY,QAAQ,SAARA,KAAQ,CAAClB,KAAD,EAAQE,IAAR,EAAiB;AAC3B,QAAIW,WAAW,iBAAOE,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCd,KAAKW,QAAxC,EAAkDI,MAAlD,CAAyD,QAAzD,CAAf;AACA,WAAOf,KAAKY,gBAAZ;AACA,wBAAWZ,IAAX,EACQ;AACAW;AADA,KADR;AAMH,CATD;+BAWOf,Y;AACHC,kB;AACAmB","file":"UserProvider.js","sourcesContent":["import crypto from \"crypto\";\nimport * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\n\n/* Provider for User Registration */\nconst create = (model, validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"email\", \"email cannot be empty\").notEmpty();\n        validate(\"user_type\", \"user_type cannot be empty\").notEmpty();\n        validate(\"password\", \"password cannot be empty\").notEmpty();\n        validate(\"confirm_password\", \"confirm_password cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n                return;\n            } else {\n                if (body.password == body.confirm_password) {\n                    delete body.confirm_password;\n                    body.password = crypto.createHash(\"sha256\").update(body.password).digest(\"base64\");\n                    resolve(body);\n                } else {\n                    reject(\"Password Not Matched\");\n                }\n            }\n        });\n    });\n};\n\n/* Provider for User login */\nconst login = (model, body) => {\n    let password = crypto.createHash(\"sha256\").update(body.password).digest(\"base64\");\n    delete body.confirm_password;\n    return {...body,\n        ... {\n            password\n        }\n    };\n\n};\nexport default {\n    ...BaseProvider,\n    create,\n    login,\n};\n"]}