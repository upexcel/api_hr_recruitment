{"version":3,"sources":["../../src/providers/ImapProvider.js"],"names":["BaseProvider","save","model","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg","last_fetched_time","format","statusActive"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;AACA;;;;;;;;AAEA;AACA,IAAMC,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,gBAAxB,EAA6C;AACtD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACAN,iBAAS,UAAT,EAAqB,0BAArB,EAAiDM,QAAjD;AACAN,iBAAS,mBAAT,EAA8B,mCAA9B;AACAE,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHV,qBAAKW,iBAAL,GAAyB,sBAAOX,KAAKW,iBAAZ,EAA+BC,MAA/B,CAAsC,YAAtC,CAAzB;AACAT,wBAAQH,IAAR;AACH;AACJ,SAPD;AAQH,KAZM,CAAP;AAaH,CAdD;AAeA,IAAMa,eAAe,SAAfA,YAAe,CAACf,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,gBAAxB,EAA6C;AAC9D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHP,wBAAQH,IAAR;AACH;AACJ,SAND;AAOH,KATM,CAAP;AAUH,CAXD;kBAYe;AACXJ,8BADW;AAEXC,cAFW;AAGXgB;AAHW,C","file":"ImapProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport moment from \"moment\";\n\n/* Provider for User Registration */\nconst save = (model, validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"email\", \"email cannot be empty\").notEmpty();\n        validate(\"password\", \"password cannot be empty\").notEmpty();\n        validate(\"last_fetched_time\", \"Last Fetched Time cannot be empty\");\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                body.last_fetched_time = moment(body.last_fetched_time).format(\"YYYY-MM-DD\")\n                resolve(body);\n            }\n        });\n    });\n};\nconst statusActive = (model, validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"email\", \"email cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                resolve(body);\n            }\n        });\n    });\n};\nexport default {\n    BaseProvider,\n    save,\n    statusActive,\n};"]}