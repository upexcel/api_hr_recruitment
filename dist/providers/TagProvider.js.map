{"version":3,"sources":["../../src/providers/TagProvider.js"],"names":["BaseProvider","save","model","type","validate","body","validationResult","Promise","resolve","reject","notEmpty","tagType","automatic","is_job_profile_tag","then","result","isEmpty","array","msg","assign_to_all_emails","assign","template_id","to","from"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;AACA;;;;;;;;AAEA;AACA,IAAMC,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAAwBC,IAAxB,EAA8BC,gBAA9B,EAAmD;AAC5D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIN,IAAJ,EAAU;AACNC,qBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACAN,qBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACH,SAHD,MAGO,IAAIP,SAAS,0BAAMQ,OAAN,CAAcC,SAA3B,EAAsC;AACzCR,qBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACAN,qBAAS,OAAT,EAAkB,uBAAlB,EAA2CM,QAA3C;AACH,SAHM,MAGA;AACHD,mBAAO,cAAP;AACH;AACD,YAAIJ,KAAKQ,kBAAT,EACIT,SAAS,iBAAT,EAA4B,iCAA5B,EAA+DM,QAA/D;AACJJ,yBAAiBQ,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBP,uBAAOM,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHb,qBAAKF,IAAL,GAAYA,IAAZ;AACAE,qBAAKc,oBAAL,GAA4Bd,KAAKe,MAAL,IAAef,KAAKc,oBAAhD;AACA,uBAAOd,KAAKe,MAAZ;AACA,oBAAIf,KAAKgB,WAAL,IAAoB,EAAxB,EAA4B;AACxB,2BAAOhB,KAAKgB,WAAZ;AACA,wBAAKhB,KAAKiB,EAAL,IAAW,EAAX,IAAiBjB,KAAKkB,IAAL,IAAa,EAAnC,EAAwC;AACpC,+BAAOlB,KAAKiB,EAAZ;AACA,+BAAOjB,KAAKkB,IAAZ;AACH;AACDf,4BAAQH,IAAR;AACH,iBAPD,MAOO;AACH,wBAAKA,KAAKiB,EAAL,IAAW,EAAX,IAAiBjB,KAAKkB,IAAL,IAAa,EAAnC,EAAwC;AACpC,+BAAOlB,KAAKiB,EAAZ;AACA,+BAAOjB,KAAKkB,IAAZ;AACH;AACDf,4BAAQH,IAAR;AACH;AACJ;AACJ,SAtBD;AAuBH,KAnCM,CAAP;AAoCH,CArCD;kBAsCe;AACXL,8BADW;AAEXC;AAFW,C","file":"TagProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport tag from \"../models/constant\";\n\n/* Provider for User Registration */\nconst save = (model, type, validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        if (type) {\n            validate(\"title\", \"Title cannot be empty\").notEmpty();\n            validate(\"color\", \"color cannot be empty\").notEmpty();\n        } else if (type === tag().tagType.automatic) {\n            validate(\"title\", \"Title cannot be empty\").notEmpty();\n            validate(\"color\", \"color cannot be empty\").notEmpty();\n        } else {\n            reject(\"Invalid Type\");\n        }\n        if (body.is_job_profile_tag)\n            validate(\"job_description\", \"job_description cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                body.type = type;\n                body.assign_to_all_emails = body.assign || body.assign_to_all_emails;\n                delete body.assign;\n                if (body.template_id == \"\") {\n                    delete body.template_id;\n                    if ((body.to == \"\" && body.from == \"\")) {\n                        delete body.to;\n                        delete body.from;\n                    }\n                    resolve(body)\n                } else {\n                    if ((body.to == \"\" && body.from == \"\")) {\n                        delete body.to;\n                        delete body.from;\n                    }\n                    resolve(body);\n                }\n            }\n        });\n    });\n};\nexport default {\n    BaseProvider,\n    save,\n};"]}