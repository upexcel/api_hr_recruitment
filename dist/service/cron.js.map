{"version":3,"sources":["../../src/service/cron.js"],"names":["inbox","require","CronJob","CronController","email","logs","fetchEmail","then","response","skippedDates","data","beforeDateEmail","reminderMail","console","log","cron_service","sendEmailToPendingCandidate","sendEmailToNotRepliedCandidate","email_status","sendToSelected","selected_response","sendToAll","send_to_all_response","controller"],"mappings":";;;;;;;;;AAEA;;;;;;;;AAFA,IAAIA,QAAQC,QAAQ,UAAR,CAAZ;AACA,IAAIC,UAAUD,QAAQ,MAAR,EAAgBC,OAA9B;;IAGaC,c,WAAAA,c;;;;;;;6BACJC,K,EAAOC,I,EAAM;AACd,gBAAIH,OAAJ,CAAY,cAAZ,EAA4B,YAAW;AACnCF,sBAAMM,UAAN,CAAiBF,KAAjB,EAAwBC,IAAxB,EAA8B;AAA9B,iBACKE,IADL,CACU,UAACC,QAAD,EAAc;AAChBR,0BAAMS,YAAN,CAAmBL,KAAnB,EAA0BC,IAA1B,EACKE,IADL,CACU,UAACG,IAAD,EAAU;AACZV,8BAAMW,eAAN,CAAsBP,KAAtB,EAA6BC,IAA7B;AACH,qBAHL;AAIH,iBANL;AAOH,aARD,EAQG,IARH,EAQS,IART;AASH;;;iCAEQD,K,EAAOC,I,EAAM;AAClB,gBAAIH,OAAJ,CAAY,kBAAZ,EAAgC,YAAW;AAAE;AACzC,mCAAQU,YAAR,CAAqBR,KAArB,EAA4BC,IAA5B,EACKE,IADL,CACU,UAACG,IAAD;AAAA,2BAAUG,QAAQC,GAAR,CAAYJ,IAAZ,CAAV;AAAA,iBADV;AAEH,aAHD,EAGG,IAHH,EAGS,IAHT;AAIH;;;sCAEaK,Y,EAAcV,I,EAAMD,K,EAAO;AACrC,gBAAIF,OAAJ,CAAY,aAAZ,EAA2B,YAAW;AAClC,mCAAQc,2BAAR,CAAoCD,YAApC,EAAkDV,IAAlD,EAAwDD,KAAxD,EACKG,IADL,CACU,UAACC,QAAD,EAAc;AAChB,uCAAQS,8BAAR,CAAuCF,YAAvC,EAAqDV,IAArD,EAA2DD,KAA3D,EACKG,IADL,CACU,UAACW,YAAD,EAAkB;AACpB,2CAAQC,cAAR,CAAuBJ,YAAvB,EAAqCV,IAArC,EAA2CD,KAA3C,EACKG,IADL,CACU,UAACa,iBAAD,EAAuB;AACzB,+CAAQC,SAAR,CAAkBN,YAAlB,EAAgCV,IAAhC,EAAsCD,KAAtC,EACKG,IADL,CACU,UAACe,oBAAD,EAA0B;AAC5BT,wCAAQC,GAAR,CAAYN,QAAZ,EAAsBU,YAAtB,EAAoCE,iBAApC,EAAuDE,oBAAvD;AACH,6BAHL;AAIH,yBANL;AAOH,qBATL;AAUH,iBAZL;AAaH,aAdD,EAcG,IAdH,EAcS,IAdT;AAeH;;;;;;AAEL,IAAMC,aAAa,IAAIpB,cAAJ,EAAnB;kBACeoB,U","file":"cron.js","sourcesContent":["let inbox = require(\"../inbox\");\nlet CronJob = require(\"cron\").CronJob;\nimport service from \"../service/reminder\"\n\nexport class CronController {\n    cron(email, logs) {\n        new CronJob(\"*/20 * * * *\", function() {\n            inbox.fetchEmail(email, logs) // running this function every 60 min\n                .then((response) => {\n                    inbox.skippedDates(email, logs)\n                        .then((data) => {\n                            inbox.beforeDateEmail(email, logs);\n                        })\n                });\n        }, null, true);\n    }\n\n    reminder(email, logs) {\n        new CronJob('00 00 18 * * 1-7', function() { // cron is running every day at 06:00 PM\n            service.reminderMail(email, logs)\n                .then((data) => console.log(data))\n        }, null, true);\n    }\n\n    PendingEmails(cron_service, logs, email) {\n        new CronJob(\"*/1 * * * *\", function() {\n            service.sendEmailToPendingCandidate(cron_service, logs, email)\n                .then((response) => {\n                    service.sendEmailToNotRepliedCandidate(cron_service, logs, email)\n                        .then((email_status) => {\n                            service.sendToSelected(cron_service, logs, email)\n                                .then((selected_response) => {\n                                    service.sendToAll(cron_service, logs, email)\n                                        .then((send_to_all_response) => {\n                                            console.log(response, email_status, selected_response, send_to_all_response)\n                                        })\n                                })\n                        })\n                })\n        }, null, true)\n    }\n}\nconst controller = new CronController();\nexport default controller;"]}