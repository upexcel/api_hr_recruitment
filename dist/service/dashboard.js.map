{"version":3,"sources":["../../src/service/dashboard.js"],"names":["dashboard","db","req","Promise","resolve","reject","months","month_days","day_wise_data","month_wise_stats","round_data","rounds","read_email","user_read_email","email_stat_by_job_profile","Tag","findAll","where","then","job_profile","findJobProfileStat","job_profile_response","findEmailStats","email_per_day_stat","candidateSelectionPerMonth","selected_candidate_stats_month","candidateSelectionPerDay","selected_candidate_stats_date","jobReadByUser","job_read_by_user","emailStatByJobProfile","stat_by_profile","callback","profile","splice","dateTime","Date","start","add","format","end","subtract","email","find","tag_id","id","toString","date","unread","exec","err","response","day_data","count","data","findMonthDates","dates","monthWiseData","month_wise_data","roundDistribution","rounds_description","readMailPerDay","read_email_count","push","forEach","val","key","val1","key1","length","label","title","day_wise","month_wise","getMonthData","getMonth","year","getFullYear","month_data","month","month_details","months_list","default_data","default_tag","job_profile_data","getRounds","round_info","shedule_for","type","tagType","default","email_data","emailLogs","time","user","email_response","get","findOne","selected","selected_tag_info","selected_count","updated_time","selected_candidate","email_read_count","read_email_time","User","user_data","userEmailData","response_user_emails","final_list","read_by_user","is_job_profile_tag","findStatByJobProfile","final_data"],"mappings":"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","file":"dashboard.js","sourcesContent":["import constant from '../models/constant';\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nlet dashboard = (db, req) => {\n    return new Promise((resolve, reject) => {\n        let months = []\n        let month_days = []\n        let day_wise_data = []\n        let month_wise_stats = []\n        let round_data = []\n        let rounds = []\n        let read_email = []\n        let user_read_email = [];\n        let email_stat_by_job_profile = [];\n        db.Tag.findAll({ where: { \"is_job_profile_tag\": 1 } }).then((job_profile) => {\n            findJobProfileStat(job_profile, function(job_profile_response) {\n                findEmailStats(function(email_per_day_stat) {\n                    job_profile_response[\"email_stat\"] = email_per_day_stat;\n                    candidateSelectionPerMonth(function(selected_candidate_stats_month) {\n                        candidateSelectionPerDay(function(selected_candidate_stats_date) {\n                            job_profile_response['read_email_data'] = read_email\n                            jobReadByUser(function(job_read_by_user) {\n                                job_profile_response['read_mail_by_user'] = job_read_by_user;\n                                emailStatByJobProfile(function(stat_by_profile) {\n                                    job_profile_response['email_stat_by_job_profile'] = stat_by_profile\n                                    resolve(job_profile_response)\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n\n\n        function findJobProfileStat(job_profile, callback) {\n            let profile = job_profile.splice(0, 1)[0];\n            let dateTime = new Date();\n            let start = moment(dateTime).add(1, 'days').format(\"YYYY-MM-DD\");\n            let end = moment(start).subtract(1, 'months').format(\"YYYY-MM-DD\");\n            req.email.find({ tag_id: profile.id.toString(), date: { \"$gte\": end, \"$lt\": start } }, { date: 1, unread: 1 }).exec(function(err, response) {\n                let day_data = {}\n                let count = 0\n                let data = []\n                month_days = []\n                start = moment(start).subtract(1, 'days').format(\"YYYY-MM-DD\")\n                findMonthDates(start, end, function(dates) {\n                    monthWiseData(profile, function(month_wise_data) {\n                        roundDistribution(profile, function(rounds_description) {\n                            readMailPerDay(profile, function(read_email_count) {\n                                read_email.push(read_email_count)\n                                _.forEach(dates, (val, key) => {\n                                    count = 0\n                                    _.forEach(response, (val1, key1) => {\n                                        if (moment(val).format(\"YYYY-MM-DD\") == moment(val1.date).format(\"YYYY-MM-DD\")) {\n                                            count++\n                                        }\n                                        if (key1 == response.length - 1) {\n                                            data.push(count)\n                                        }\n                                    })\n                                    if (key == dates.length - 1) {\n                                        if (job_profile.length) {\n                                            day_wise_data.push({ data: data, label: profile.title, dates: dates })\n                                            findJobProfileStat(job_profile, callback)\n                                        } else {\n                                            day_wise_data.push({ data: data, label: profile.title, dates: dates })\n                                            callback({ day_wise: day_wise_data, month_wise: month_wise_data, rounds: rounds_description })\n                                        }\n                                    }\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        }\n\n        function findMonthDates(start, end, callback) {\n            if (new Date(start) > new Date(end)) {\n                month_days.push(moment(end).format(\"YYYY-MM-DD\"))\n                end = moment(end).add(1, 'days');\n                findMonthDates(start, end, callback)\n            } else {\n                callback(month_days)\n            }\n        }\n\n        function getMonthData(start, end, callback) {\n            if (new Date(end).getMonth() <= new Date(start).getMonth()) {\n                months.push(new Date(end).getMonth());\n                end = moment(end).add(1, 'months').format(\"YYYY-MM-DD\");\n                getMonthData(start, end, callback)\n            } else {\n                callback(months)\n            }\n        }\n\n        function monthWiseData(profile, callback) {\n            let year = new Date().getFullYear()\n            let start = moment(new Date()).format(\"YYYY-MM-DD\");\n            let end = moment(new Date(year, 0, 1)).format(\"YYYY-MM-DD\");\n            let count = 0;\n            let month_data = []\n            let month = []\n            months = []\n            req.email.find({ tag_id: profile.id.toString(), date: { \"$gte\": end, \"$lt\": start } }, { date: 1 }).exec(function(err, response) {\n                getMonthData(start, end, function(month_details) {\n                    _.forEach(month_details, (val, key) => {\n                        count = 0\n                        month.push(constant().months_list[val])\n                        _.forEach(response, (val1, key1) => {\n                            if (val1.date.getMonth() == val) {\n                                count++\n                            }\n                            if (key1 == response.length - 1) {\n                                month_data.push(count)\n                            }\n                        })\n                        if (key == month_details.length - 1) {\n                            month_wise_stats.push({ data: month_data, label: profile.title, months: month })\n                            callback(month_wise_stats)\n                        }\n                    })\n                })\n            })\n        }\n\n        function roundDistribution(profile, callback) {\n            let count = 0\n            let data = []\n            let default_data = []\n            req.email.find({ tag_id: profile.id.toString() }, { default_tag: 1 }).exec(function(err, job_profile_data) {\n                getRounds(function(round_info) {\n                    _.forEach(round_info, (val, key) => {\n                        count = 0\n                        _.forEach(job_profile_data, (val1, key1) => {\n                            if (val.id.toString() == val1.default_tag) {\n                                count++\n                            }\n                            if (key1 == job_profile_data.length - 1) {\n                                default_data.push(val.title)\n                                data.push(count)\n                            }\n                        })\n                        if (key == constant().shedule_for.length - 1) {\n                            round_data.push({ data: data, label: profile.title+\" ( \"+job_profile_data.length+\" )\", rounds: default_data })\n                            callback(round_data)\n                        }\n                    })\n                })\n            })\n        }\n\n        function getRounds(callback) {\n            db.Tag.findAll({where:{type:constant().tagType.default}}).then((default_tag)=>{\n                callback(default_tag)\n            })\n        }\n\n        function findEmailStats(callback) {\n            let dateTime = new Date();\n            let start = moment(dateTime).add(1, 'days').format(\"MMM DD, YYYY HH:mm\");\n            let end = moment(start).subtract(1, 'months').format(\"MMM DD, YYYY HH:mm\");\n            let email_data = []\n            let count = 0\n            req.emailLogs.find({ time: { \"$gte\": new Date(end), \"$lt\": new Date(start) }, user: constant().user }).exec(function(err, email_response) {\n                _.forEach(month_days, (val, key) => {\n                    count = 0\n                    _.forEach(email_response, (val1, key1) => {\n                        if (moment(val).format(\"YYYY-MM-DD\") == moment(val1.get('time')).format(\"YYYY-MM-DD\")) {\n                            count++\n                        }\n                        if (key1 == email_response.length - 1) {\n                            email_data.push(count)\n                            count = 0\n                        }\n                    })\n                    if (key == month_days.length - 1) {\n                        callback([{ label: \"Automatic Mails\", data: email_data, dates: month_days }])\n                    }\n                })\n            })\n        }\n\n        function candidateSelectionPerMonth(callback) {\n            db.Tag.findOne({ where: { title: constant().selected, type: constant().tagType.default } })\n                .then((selected_tag_info) => {\n                    let year = new Date().getFullYear()\n                    let start = moment(new Date()).format(\"MMM DD, YYYY HH:mm\");\n                    let end = moment(new Date(year, 0, 1)).format(\"MMM DD, YYYY HH:mm\");\n                    let count = 0;\n                    let selected_count = [];\n                    let month = []\n                    req.email.find({ updated_time: { \"$gte\": end, \"$lt\": start }, default_tag: selected_tag_info.id.toString() }, { updated_time: 1 }).exec(function(err, selected_candidate) {\n\n                        _.forEach(months, (val, key) => {\n                            count = 0\n                            month.push(constant().months_list[val])\n                            _.forEach(selected_candidate, (val1, key1) => {\n                                if (val1.updated_time.getMonth() == val) {\n                                    count++\n                                }\n                                if (key1 == selected_candidate.length - 1) {\n                                    selected_count.push(count)\n                                    count = 0\n                                }\n                            })\n                            if (key == months.length - 1) {\n                                callback({ label: \"Selected Candidate\", data: selected_count, months: month })\n                            }\n                        })\n                    })\n                })\n        }\n\n\n        function candidateSelectionPerDay(callback) {\n            db.Tag.findOne({ where: { title: constant().selected, type: constant().tagType.default } })\n                .then((selected_tag_info) => {\n                    let dateTime = new Date();\n                    let start = moment(dateTime).add(1, 'days').format(\"YYYY-MM-DD\");\n                    let end = moment(start).subtract(1, 'months').format(\"YYYY-MM-DD\");\n                    let count = 0;\n                    let selected_count = [];\n                    req.email.find({ updated_time: { \"$gte\": end, \"$lt\": start }, default_tag: selected_tag_info.id.toString() }, { updated_time: 1 }).exec(function(err, selected_candidate) {\n                        _.forEach(month_days, (val, key) => {\n                            count = 0\n                            _.forEach(selected_candidate, (val1, key1) => {\n                                if (moment(val1.updated_time).format(\"YYYY-MM-DD\") == val) {\n                                    count++\n                                }\n                                if (key1 == selected_candidate.length - 1) {\n                                    selected_count.push(count)\n                                    count = 0\n                                }\n                            })\n                            if (key == month_days.length - 1) {\n                                callback({ label: \"Selected Candidate\", data: selected_count, dates: month_days })\n                            }\n                        })\n                    })\n                })\n        }\n\n        function readMailPerDay(profile, callback) {\n            let email_read_count = []\n            let dateTime = new Date();\n            let count = 0\n            let start = moment(dateTime).add(1, 'days').format(\"YYYY-MM-DD\");\n            let end = moment(start).subtract(1, 'months').format(\"YYYY-MM-DD\");\n            req.email.find({ tag_id: profile.id.toString(), read_email_time: { \"$gte\": end, \"$lt\": start } }).exec(function(err, email_data) {\n                _.forEach(month_days, (val, key) => {\n                    count = 0\n                    _.forEach(email_data, (val1, key1) => {\n                        if (moment(val1.read_email_time).format(\"YYYY-MM-DD\") == val) {\n                            count++\n                        }\n                        if (key1 == email_data.length - 1) {\n                            email_read_count.push(count)\n                            count = 0\n                        }\n                    })\n                    if (key == month_days.length - 1) {\n                        callback({ label: profile.title, data: email_read_count, dates: month_days })\n                    }\n                })\n            })\n        }\n\n        function jobReadByUser(callback) {\n            db.User.findAll().then((user_data) => {\n                userEmailData(user_data, function(response_user_emails) {\n                    callback(response_user_emails)\n                })\n            })\n        }\n\n        function userEmailData(user_data, callback) {\n            let email_read_count = []\n            let dateTime = new Date();\n            let count = 0\n            let start = moment(dateTime).add(1, 'days').format(\"YYYY-MM-DD\");\n            let end = moment(start).subtract(1, 'months').format(\"YYYY-MM-DD\");\n            let user = user_data.splice(0, 1)[0]\n            let final_list = []\n            req.email.find({ read_email_time: { \"$gte\": end, \"$lt\": start }, read_by_user: user.email }, { read_email_time: 1 }).exec(function(err, email_data) {\n                _.forEach(month_days, (val, key) => {\n                    count = 0\n                    _.forEach(email_data, (val1, key1) => {\n                        if (moment(val1.read_email_time).format(\"YYYY-MM-DD\") == val) {\n                            count++\n                        }\n                        if (key1 == email_data.length - 1) {\n                            email_read_count.push(count)\n                            count = 0\n                        }\n                    })\n                    if (key == month_days.length - 1) {\n                        if (user_data.length) {\n                            user_read_email.push({ label: user.email, data: email_read_count, dates: month_days })\n                            userEmailData(user_data, callback)\n                        } else {\n                            user_read_email.push({ label: user.email, data: email_read_count, dates: month_days })\n                            callback(user_read_email)\n                        }\n                    }\n                })\n            })\n        }\n\n        function emailStatByJobProfile(callback) {\n            db.Tag.findAll({ where: { is_job_profile_tag: 1 } }).then((job_profile) => {\n                findStatByJobProfile(job_profile, function(final_data) {\n                    callback(final_data)\n                })\n            })\n\n        }\n\n        function findStatByJobProfile(job_profile, callback) {\n            let dateTime = new Date();\n            let start = moment(dateTime).add(1, 'days').format(\"MMM DD, YYYY HH:mm\");\n            let end = moment(start).subtract(1, 'months').format(\"MMM DD, YYYY HH:mm\");\n            let email_data = []\n            let count = 0\n            let profile = job_profile.splice(0, 1)[0];\n            req.emailLogs.find({ time: { \"$gte\": new Date(end), \"$lt\": new Date(start) }, tag_id: profile.id.toString(), user: constant().user }).exec(function(err, email_response) {\n                _.forEach(month_days, (val, key) => {\n                    count = 0\n                    _.forEach(email_response, (val1, key1) => {\n                        if (moment(val).format(\"YYYY-MM-DD\") == moment(val1.get('time')).format(\"YYYY-MM-DD\")) {\n                            count++\n                        }\n                        if (key1 == email_response.length - 1) {\n                            email_data.push(count)\n                            count = 0\n                        }\n                    })\n                    if (key == month_days.length - 1) {\n                        email_stat_by_job_profile.push({ label: profile.title, data: email_data, dates: month_days })\n                        if (job_profile.length) {\n                            findStatByJobProfile(job_profile, callback)\n                        } else {\n                            callback(email_stat_by_job_profile)\n                        }\n                    }\n                })\n            })\n        }\n    })\n}\n\nexport default {\n    dashboard\n}"]}