{"version":3,"sources":["../../src/service/reminder.js"],"names":["reminderMail","email","logs","Promise","resolve","reject","dateTime","Date","start","format","end","add","id_list","find","shedule_date","exec","err","response","length","sendReminder","reminder_status","update","body","mongo_id","reminder_send","multi","update_response","mail_data","callback","user_info","splice","push","_id","Template","findById","parseInt","send_template","then","template_data","filter","from","tag_id","replaced_data","Smtp","findOne","where","status","smtp","subject","reminder","shedule_time","sendMail","sender_mail","mail_response","emailLog","mail_log","message","sendEmailToPendingCandidate","cron_service","work","pending_work","cronWorkData","get","template","is_automatic_email_send","result","sendTemplateToEmails","data","$pull","candidate_list","updated_cronWork","console","log","emails","email_id","html","text","log_response","send_template_count","template_id","id","reply_to_id","reply_to","data1","findOneAndUpdate","$set","update_status","sendEmailToNotRepliedCandidate","not_replied","candidate_info","$inc","$push","sendToSelected","selectedCandidate","sendToAll","email_data"],"mappings":"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","file":"reminder.js","sourcesContent":["import constant from '../models/constant'\nimport moment from 'moment'\nimport mail from '../modules/mail'\nimport replaceData from \"../modules/replaceVariable\";\nimport db from \"../db\";\nimport email_log from \"./emaillogs.js\";\n\nlet reminderMail = (email, logs) => {\n    return new Promise((resolve, reject) => {\n        let dateTime = new Date();\n        let start = moment(dateTime).format(\"YYYY-MM-DD\"); //currnet date \n        let end = moment(start).add(1, 'days').format(\"YYYY-MM-DD\"); // next date\n        let id_list = []\n        email.find({ shedule_date: { \"$gte\": start, \"$eq\": end } }, { \"shedule_date\": 1, \"shedule_time\": 1, \"tag_id\": 1, \"from\": 1, \"send_template\": 1, \"sender_mail\": 1 }).exec(function(err, response) {\n            if (response.length) {\n                sendReminder(response, function(reminder_status) {\n                    email.update({ \"_id\": { \"$in\": body.mongo_id } }, { reminder_send: 1 }, { multi: true }).exec(function(err, update_response) {\n                        if (!err) {\n                            resolve(reminder_status)\n                        }\n                    })\n                })\n            } else {\n                resolve(\"No email is sheduled for tomorrow\")\n            }\n        })\n\n        function sendReminder(mail_data, callback) { // function for sending reminder\n            let user_info = mail_data.splice(0, 1)[0];\n            id_list.push(user_info._id)\n            db.Template.findById(parseInt(user_info.send_template)) // finding template that is send to candiadte\n                .then((template_data) => {\n                    replaceData.filter(template_data.body, user_info.from, user_info.tag_id[0]) // replace user variables\n                        .then((replaced_data) => {\n                            db.Smtp.findOne({ where: { status: 1 } })\n                                .then((smtp) => {\n                                    let subject = constant().reminder + \" \" + moment(user_info.shedule_date).format(\"YYYY-MM-DD\") + \" at \" + user_info.shedule_time // subject for remonder email\n                                    mail.sendMail(user_info.sender_mail, subject, \"\", smtp, replaced_data) // sending email\n                                        .then((mail_response) => {\n                                            mail_response['user'] = \"Reminder\";\n                                            email_log.emailLog(logs, mail_response).then((mail_log) => {\n                                                if (mail_data.length) {\n                                                    sendReminder(mail_data, callback)\n                                                } else {\n                                                    callback({ message: \"Reminder Sent To Selected Users\" })\n                                                }\n                                            })\n                                        })\n                                })\n                        })\n                })\n        }\n    })\n}\n\n\nlet sendEmailToPendingCandidate = (cron_service, logs, email) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().pending_work }).exec(function(err, cronWorkData) {\n            if (cronWorkData && cronWorkData.get('candidate_list').length) {\n                db.Smtp.findOne({ where: { status: 1 } })\n                    .then((smtp) => {\n                        db.Template.findById(cronWorkData.get('template_id')).then((template) => {\n                            email.find({ _id: cronWorkData.get('candidate_list')[0]._id, \"$or\": [{ is_automatic_email_send: 0 }, { is_automatic_email_send: { \"$exists\": false } }] }, { \"_id\": 1, \"sender_mail\": 1, \"from\": 1, \"is_automatic_email_send\": 1, \"subject\": 1 }).exec(function(err, result) {\n                                if (result) {\n                                    sendTemplateToEmails(cronWorkData.get('candidate_list')[0], template, smtp, function(err, data) {\n                                        if (err) {\n                                            reject(err)\n                                        } else {\n                                            resolve(data)\n                                        }\n                                    })\n                                } else {\n                                    cron_service.update({ _id: cronWorkData.get('_id') }, { $pull: { candidate_list: cronWorkData.get('candidate_list')[0] } }).exec(function(err, updated_cronWork) {\n                                        if (!err) {\n                                            console.log(updated_cronWork)\n                                            resolve(\"Email Sent To candidate\")\n                                        }\n                                    })\n                                }\n                            })\n                        })\n\n                        function sendTemplateToEmails(emails, template, smtp, callback) {\n                            let subject = \"\";\n                            console.log(emails)\n                            if (!smtp) {\n                                callback(\"Not active Smtp\", null);\n                            }\n                            let email_id = emails;\n                            replaceData.filter(template.body, email_id.from, emails.tag_id)\n                                .then((html) => {\n                                    subject = template.subject;\n                                    mail.sendMail(email_id.sender_mail, subject, constant().smtp.text, smtp, html, true)\n                                        .then((response) => {\n                                            response['user'] = cronWorkData.get('user');\n                                            response['tag_id'] = emails.tag_id;\n                                            email_log.emailLog(logs, response)\n                                                .then((log_response) => {\n                                                    email.update({ \"_id\": email_id._id }, { is_automatic_email_send: 1, send_template_count: 1, template_id: [template.id],reply_to_id:response.reply_to })\n                                                        .then((data1) => {\n                                                            cron_service.update({ _id: cronWorkData.get('_id') }, { \"$pull\": { candidate_list: emails } }).exec(function(err, updated_cronWork) {\n                                                                if (!err) {\n                                                                    console.log(updated_cronWork)\n                                                                    callback(null, \"email sent to pending candidate\")\n                                                                }\n                                                            })\n                                                        })\n                                                })\n                                        })\n\n                                })\n\n                        }\n                    })\n            } else {\n                cron_service.findOneAndUpdate({ status: 1, work: constant().pending_work }, { $set: { status: 0 } }).exec(function(err, update_status) {\n                    if (err) {\n                        reject(err)\n                    } else {\n                        resolve(\"Nothing in Pending\")\n                    }\n                })\n            }\n        })\n    })\n}\n\n\nlet sendEmailToNotRepliedCandidate = (cron_service, logs, email) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().not_replied }).then((cronWorkData) => {\n            if (cronWorkData && cronWorkData.get('candidate_list').length) {\n                db.Smtp.findOne({ where: { status: 1 } })\n                    .then((smtp) => {\n                        sendTemplateToEmails(cronWorkData, smtp, function(err, response) {\n                            resolve(\"SUCCESS\")\n                        })\n\n                        function sendTemplateToEmails(cronWorkData, smtp, callback) {\n                            let subject = cronWorkData.get('subject');\n                            let candidate_info = cronWorkData.get(\"candidate_list\")[0];\n                            if (!smtp) {\n                                callback(\"Not active Smtp\", null);\n                            }\n                            replaceData.filter(cronWorkData.get('body'), candidate_info.from, cronWorkData.tag_id)\n                                .then((html) => {\n                                    mail.sendMail(candidate_info.sender_mail, subject, constant().smtp.text, smtp, html).then((mail_response) => {\n                                        email_log.emailLog(logs, mail_response)\n                                            .then((log_response) => {\n                                                email.update({ _id: candidate_info._id }, { $inc: { send_template_count: 1 }, $push: { template_id: parseInt(cronWorkData.get('template_id')) }, is_automatic_email_send: 1 }).then((response) => {\n                                                    cron_service.findOneAndUpdate({ _id: cronWorkData._id }, { \"$pull\": { candidate_list: candidate_info } }).then((updated_cronWork) => {\n                                                        callback(null, updated_cronWork)\n                                                    })\n                                                })\n                                            })\n                                    })\n                                })\n                        }\n                    })\n            } else {\n                cron_service.findOneAndUpdate({ status: 1, work: constant().not_replied }, { $set: { status: 0 } }).exec(function(err, update_status) {\n                    if (err) {\n                        reject(err)\n                    } else {\n                        resolve(\"Nothing in Pending\")\n                    }\n                })\n            }\n        })\n    });\n}\n\nlet sendToSelected = (cron_service, logs, email) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().selectedCandidate }).then((cronWorkData) => {\n            if (cronWorkData != null ? cronWorkData.get('candidate_list').length : false) {\n                db.Smtp.findOne({ where: { status: 1 } }).then((smtp) => {\n                    let email = cronWorkData.get('candidate_list')[0];\n                    mail.sendMail(email, cronWorkData.get('subject'), constant().smtp.text, smtp, cronWorkData.get('body')).then((mail_response) => {\n                        email_log.emailLog(logs, mail_response)\n                            .then((log_response) => {\n                                cron_service.findOneAndUpdate({ _id: cronWorkData._id }, { \"$pull\": { candidate_list: email } }).then((updated_cronWork) => {\n                                    resolve(\"SUCCESS\")\n                                })\n                            })\n                    })\n                })\n            } else {\n                if (!cronWorkData) {\n                    resolve(\"Nothing In Pending\")\n                } else {\n                    cron_service.findOneAndUpdate({ _id: cronWorkData.get('_id') }, { status: 0 }).then((updated_cronWork) => {\n                        resolve(\"Nothing In Pending\")\n                    })\n                }\n            }\n        })\n    });\n}\n\nlet sendToAll = (cron_service, logs, email) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().sendToAll }).then((cronWorkData) => {\n            if (cronWorkData != null ? cronWorkData.get('candidate_list').length : false) {\n                db.Smtp.findOne({ where: { status: 1 } }).then((smtp) => {\n                    let email_data = cronWorkData.get('candidate_list')[0];\n                    console.log(email_data)\n                    mail.sendMail(email_data, cronWorkData.get('subject'), constant().smtp.text, smtp, cronWorkData.get('body')).then((mail_response) => {\n                        email_log.emailLog(logs, mail_response)\n                            .then((log_response) => {\n                                cron_service.findOneAndUpdate({ _id: cronWorkData._id }, { \"$pull\": { candidate_list: email_data } }).then((updated_cronWork) => {\n                                    resolve(\"SUCCESS\")\n                                })\n                            })\n                    })\n                })\n            } else {\n                if (!cronWorkData) {\n                    resolve(\"Nothing In Pending\")\n                } else {\n                    cron_service.findOneAndUpdate({ _id: cronWorkData.get('_id') }, { status: 0 }).then((updated_cronWork) => {\n                        resolve(\"Nothing In Pending\")\n                    })\n                }\n            }\n        })\n    });\n}\nexport default {\n    reminderMail,\n    sendEmailToPendingCandidate,\n    sendEmailToNotRepliedCandidate,\n    sendToSelected,\n    sendToAll\n}"]}