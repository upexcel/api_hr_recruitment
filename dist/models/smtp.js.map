{"version":3,"sources":["../../src/models/smtp.js"],"names":["sequelize","DataTypes","smtp","define","email","type","STRING","unique","username","password","smtp_server","server_port","INTEGER","ENUM","values","status","BOOLEAN","defaultValue","timestamps","freezeTableName","allowNull","hooks","beforeCreate","SMTP","Promise","resolve","reject","findOne","where","then","classMethods","changeStatus","update","data","$not","message","catch","error","testSmtp","is_silent","sendMail","subject","text","html","response"],"mappings":"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","file":"smtp.js","sourcesContent":["import _ from 'lodash';\nimport mail from \"../modules/mail\";\nimport constant from \"../models/constant\";\nimport emailExistence from \"email-existence\";\nimport config from \"../config\";\n\nexport default function(sequelize, DataTypes) {\n    const smtp = sequelize.define(\"SMTP\", {\n        email: {\n            type: DataTypes.STRING(255),\n            unique: false,\n        },\n        username: DataTypes.STRING(255),\n        password: DataTypes.STRING,\n        smtp_server: DataTypes.STRING,\n        server_port: DataTypes.INTEGER,\n        type: {\n            type: DataTypes.ENUM,\n            values: [\"SSL\", \"TLS\"],\n        },\n        status: {\n            type: DataTypes.BOOLEAN,\n            defaultValue: false,\n        },\n    }, {\n        timestamps: true,\n        freezeTableName: true,\n        allowNull: true,\n        hooks: {\n            beforeCreate: function(SMTP) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({ where: { email: SMTP.email } })\n                        .then((email) => {\n                            if (email) {\n                                reject(\"Email Already In Use\");\n                            } else {\n                                resolve();\n                            }\n                        });\n                });\n\n            }\n        },\n        classMethods: {\n            changeStatus(email) {\n                return new Promise((resolve, reject) => {\n                    this.update({ status: 1 }, { where: { email: email } })\n                        .then((data) => {\n                            if (data[0]) {\n                                this.update({ status: 0 }, { where: { $not: { email: email } } })\n                                    .then((data) => {\n                                        resolve({ message: \"Status Changed Successfully\" })\n                                    })\n                                    .catch((error) => { reject(\"error\") })\n                            } else {\n                                reject(\"Email not found\");\n                            }\n                        })\n                })\n            },\n\n            testSmtp(email) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({ where: { status: true } })\n                        .then((data) => {\n                            if (data) {\n                                if (data.status == true) {\n                                    if (config.is_silent == false) {\n                                        resolve({ is_silent: true })\n                                    } else {\n                                        mail.sendMail(email, constant().smtp.subject, constant().smtp.text, data, constant().smtp.html)\n                                            .then((response) => { resolve(response) })\n                                            .catch((error) => { reject(error) });\n                                    }\n                                } else {\n                                    reject(\"Email Is Not Active , Active And Try Again...\");\n                                }\n                            } else {\n                                reject(\"Email Not Found\");\n                            }\n\n                        })\n                        .catch((error) => { reject(error) });\n                })\n            }\n        }\n    });\n    return smtp;\n}"]}