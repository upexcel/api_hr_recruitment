{"version":3,"sources":["../../src/models/tag.js"],"names":["sequelize","DataTypes","Tag","define","email","type","STRING","title","color","subject","unique","ENUM","values","is_job_profile_tag","BOOLEAN","defaultValue","to","DATE","from","assign_to_all_emails","template_id","INTEGER","default_id","is_email_send","job_description","allowNull","priority","parent_id","hooks","beforeCreate","TAG","options","Promise","resolve","reject","findOne","where","then","docs","timestamps","freezeTableName","classMethods","tag","tag_id","app","route","post","save","find","id","details","status","assignTag","data","map","val","key","match","RegExp","Date","date","getTime","sender_mail","push","_id","size","err","assignNewTag","toString","destroyDefault","db","tagId","destroy","$ne","updateMany","default_tag","$set","catch","findTagInfo","findById","response","error","message","assignTagDuringUpdate","req","length","body","mongoId","splice","update","$in","multi","data1","updatePriority","update_priority","callback","update_response","associate","models","belongsTo","Template","foreignKey"],"mappings":"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","file":"tag.js","sourcesContent":["import _ from 'lodash';\nexport default function(sequelize, DataTypes) {\n    const Tag = sequelize.define(\"TAG\", {\n        email: {\n            type: DataTypes.STRING,\n        },\n        title: {\n            type: DataTypes.STRING,\n        },\n        color: DataTypes.STRING,\n        subject: {\n            type: DataTypes.STRING(255),\n            unique: false,\n        },\n        type: {\n            type: DataTypes.ENUM,\n            values: [\"Default\", \"Manual\", \"Automatic\"],\n        },\n        is_job_profile_tag: {\n            type: DataTypes.BOOLEAN,\n            defaultValue: 0\n        },\n        to: DataTypes.DATE,\n        from: DataTypes.DATE,\n        assign_to_all_emails: {\n            type: DataTypes.BOOLEAN,\n            defaultValue: 0\n        },\n        template_id: { type: DataTypes.INTEGER },\n        default_id: {\n            type: DataTypes.INTEGER,\n            defaultValue: 0\n        },\n        is_email_send: {\n            type: DataTypes.BOOLEAN,\n            defaultValue: 0\n        },\n        job_description: {\n            type: DataTypes.STRING,\n            defaultValue: \"\",\n            allowNull: true\n        },\n        priority: {\n            type: DataTypes.STRING,\n            defaultValue: 0,\n            allowNull: true\n        },\n        parent_id: {\n            type: DataTypes.INTEGER,\n            defaultValue: 0,\n            allowNull: true\n        }\n    }, {\n        hooks: {\n            beforeCreate: function(TAG, options) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({ where: { subject: TAG.subject } })\n                        .then((docs) => {\n                            if (docs) {\n                                reject(\"Subject Already Exists\");\n                            } else {\n                                resolve({ docs })\n                            }\n                        })\n                })\n            }\n        },\n        timestamps: true,\n        freezeTableName: true,\n        allowNull: true,\n        classMethods: {\n            // login.....\n            tag(tag_id) {\n                app.route(\"/tag/add/:type\").post(tag.save);\n                return new Promise((resolve, reject) => {\n                    this.find({\n                            where: {\n                                id: tag_id\n                            }\n                        })\n                        .then((details) => {\n                            if (details) {\n                                resolve({\n                                    status: 1\n                                });\n                            } else {\n                                reject(\"Invalid tag_id\");\n                            }\n                        });\n                });\n            },\n            assignTag(tag, email) {\n                return new Promise((resolve, reject) => {\n                    email.find({})\n                        .then((data) => {\n                            var id = []\n                            _.map(data, (val, key) => {\n                                if ((val.subject.match(new RegExp(tag.subject, 'gi'))) || ((tag.to && tag.from) && (new Date(val.date).getTime() < new Date(tag.to).getTime() && new Date(val.date).getTime() > new Date(tag.from).getTime())) || ((tag.email) && (val.sender_mail.match(new RegExp(tag.email, 'gi'))))) {\n                                    id.push(val._id);\n                                    if (key == (_.size(data) - 1)) {\n                                        resolve(id)\n                                    }\n                                } else {\n                                    if (key == (_.size(data) - 1)) {\n                                        resolve(id)\n                                    }\n                                }\n\n                            })\n                        }, (err) => {\n                            reject(err)\n                        })\n                })\n            },\n            assignNewTag(tag, email) {\n                return new Promise((resolve, reject) => {\n                    email.find({ tag_id: (tag.parent_id).toString() })\n                        .then((data) => {\n                            var id = []\n                            _.map(data, (val, key) => {\n                                if ((val.subject.match(new RegExp(tag.subject, 'gi'))) || ((tag.to && tag.from) && (new Date(val.date).getTime() < new Date(tag.to).getTime() && new Date(val.date).getTime() > new Date(tag.from).getTime())) || ((tag.email) && (val.sender_mail.match(new RegExp(tag.email, 'gi'))))) {\n                                    id.push(val._id);\n                                    if (key == (_.size(data) - 1)) {\n                                        resolve(id)\n                                    }\n                                } else {\n                                    if (key == (_.size(data) - 1)) {\n                                        resolve(id)\n                                    }\n                                }\n\n                            })\n                            resolve(id)\n                        }, (err) => {\n                            reject(err)\n                        })\n                })\n            },\n            destroyDefault(email, db, tagId, type) {\n                return new Promise((resolve, reject) => {\n                    db.Tag.destroy({ where: { id: tagId, type: type, parent_id: { $ne: null } } })\n                        .then((docs) => {\n                                email.updateMany({ default_tag: tagId }, { $set: { \"default_tag\": \"\" } }).then((data) => {\n                                    resolve(\"SUCCESS\")\n                                }).catch(err => reject(err))\n                        }).catch(err => reject(err))\n                })\n            },\n            findTagInfo(tagId) {\n                return new Promise((resolve, reject) => {\n                    this.findById(tagId)\n                        .then((response) => { resolve(response) })\n                        .catch((error) => { reject({ error: 1, message: error, data: [] }) })\n                })\n            },\n            assignTagDuringUpdate(tag, req) {\n                return new Promise((resolve, reject) => {\n                    req.email.find({ tag_id: { $ne: tag.toString() } }).then((data) => {\n                        let id = []\n                        if (data.length) {\n                            _.map(data, (val, key) => {\n                                if ((val.subject.match(new RegExp(req.body.subject, 'gi'))) || ((req.body.to && req.body.from) && (new Date(val.date).getTime() < new Date(req.body.to).getTime() && new Date(val.date).getTime() > new Date(req.body.from).getTime())) || ((req.body.email) && (val.sender_mail.match(new RegExp(req.body.email, 'gi'))))) {\n                                    id.push(val._id);\n                                    if (key == (_.size(data) - 1)) {\n                                        assignTag(id)\n                                    }\n                                } else {\n                                    if (key == (_.size(data) - 1)) {\n                                        assignTag(id)\n                                    }\n                                }\n\n                            })\n                        } else {\n                            resolve();\n                        }\n\n                        function assignTag(id) {\n                            let mongoId = id.splice(0, 100)\n                            req.email.update({ _id: { $in: mongoId } }, { \"$addToSet\": { \"tag_id\": tag.toString() }, \"email_timestamp\": new Date().getTime() }, { multi: true })\n                                .then((data1) => {\n                                    if (!id.length) {\n                                        resolve({ message: \"tag assigned sucessfully\" })\n                                    } else {\n                                        assignTag(id)\n                                    }\n                                })\n                        }\n                    })\n                });\n            },\n            updatePriority(body) {\n                return new Promise((resolve, reject) => {\n                    update_priority(body, function(response) {\n                        resolve(response)\n                    })\n                });\n\n                function update_priority(body, callback) {\n                    let data = body.splice(0, 1)[0];\n                    Tag.update({ priority: data.priority }, { where: { id: data.id } }).then((update_response) => {\n                        if (body.length) {\n                            update_priority(body, callback)\n                        } else {\n                            callback(\"new priority is set\")\n                        }\n                    })\n                }\n            }\n        },\n        associate: (models) => {\n            Tag.belongsTo(models.Template, { foreignKey: 'template_id', allowNull: true })\n        }\n    });\n    return Tag;\n}"]}