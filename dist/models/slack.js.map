{"version":3,"sources":["../../src/models/slack.js"],"names":["sequelize","DataTypes","Slack","define","teamName","STRING","token","selected_channel","status","BOOLEAN","timestamps","freezeTableName","allowNull","classMethods","getChannelList","slackInfo","Promise","resolve","reject","console","log","web","WebClient","channels","list","err","res","slackData","findAll","then","response","length","findChannel","slackAccount","slackAccounts","callback","account","splice","push","id","channel_list","require"],"mappings":";;;;;;kBAEe,UAASA,SAAT,EAAoBC,SAApB,EAA+B;AAC1C,QAAMC,QAAQF,UAAUG,MAAV,CAAiB,OAAjB,EAA0B;AACpCC,kBAAUH,UAAUI,MADgB;AAEpCC,eAAOL,UAAUI,MAFmB;AAGpCE,0BAAkBN,UAAUI,MAHQ;AAIpCG,gBAAQP,UAAUQ;AAJkB,KAA1B,EAKX;AACCC,oBAAY,IADb;AAECC,yBAAiB,IAFlB;AAGCC,mBAAW,IAHZ;AAICC,sBAAc;AACVC,0BADU,0BACKC,SADL,EACgB;AACtB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,4BAAQC,GAAR,CAAYL,SAAZ;AACA,wBAAIM,MAAM,IAAIC,SAAJ,CAAcP,UAAUT,KAAxB,CAAV;AACAe,wBAAIE,QAAJ,CAAaC,IAAb,CAAkB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACjC,4BAAI,CAACD,GAAL,EAAU;AACNR,oCAAQS,IAAIH,QAAZ;AACH,yBAFD,MAEO;AACHL,mCAAO,yBAAP;AACH;AACJ,qBAND;AAOH,iBAVM,CAAP;AAWH,aAbS;AAcVS,qBAdU,uBAcE;AAAA;;AACR,uBAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIS,YAAY,EAAhB;AACA,0BAAKC,OAAL,GAAeC,IAAf,CAAoB,UAACC,QAAD,EAAc;AAC9B,4BAAIA,SAASC,MAAb,EAAqB;AACjBC,wCAAYF,QAAZ,EAAsB,UAASG,YAAT,EAAuB;AACzChB,wCAAQgB,YAAR;AACH,6BAFD;AAGH,yBAJD,MAIO;AACHhB,oCAAQa,QAAR;AACH;AACJ,qBARD;;AAUA,6BAASE,WAAT,CAAqBE,aAArB,EAAoCC,QAApC,EAA8C;AAC1C,4BAAIC,UAAUF,cAAcG,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAd;AACA,4BAAIhB,MAAM,IAAIC,SAAJ,CAAcc,QAAQ9B,KAAtB,CAAV;AACAe,4BAAIE,QAAJ,CAAaC,IAAb,CAAkB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACjC,gCAAI,CAACD,GAAL,EAAU;AACNE,0CAAUW,IAAV,CAAe,EAAEC,IAAIH,QAAQG,EAAd,EAAkBnC,UAAUgC,QAAQhC,QAApC,EAA8CE,OAAO8B,QAAQ9B,KAA7D,EAAoEC,kBAAkB6B,QAAQ7B,gBAA9F,EAAgHC,QAAQ4B,QAAQ5B,MAAhI,EAAwIgC,cAAcd,IAAIH,QAA1J,EAAf;AACH,6BAFD,MAEO;AACHJ,wCAAQC,GAAR,CAAYK,GAAZ;AACAU,yCAAS,yBAAT;AACH;AACD,gCAAID,cAAcH,MAAlB,EAA0B;AACtBC,4CAAYE,aAAZ,EAA2BC,QAA3B;AACH,6BAFD,MAEO;AACHA,yCAASR,SAAT;AACH;AACJ,yBAZD;AAaH;AACJ,iBA7BM,CAAP;AA8BH;AA7CS;AAJf,KALW,CAAd;AAyDA,WAAOzB,KAAP;AACH,C;;AA7DD,IAAIoB,YAAYmB,QAAQ,eAAR,EAAyBnB,SAAzC","file":"slack.js","sourcesContent":["let WebClient = require('@slack/client').WebClient;\n\nexport default function(sequelize, DataTypes) {\n    const Slack = sequelize.define(\"SLACK\", {\n        teamName: DataTypes.STRING,\n        token: DataTypes.STRING,\n        selected_channel: DataTypes.STRING,\n        status: DataTypes.BOOLEAN\n    }, {\n        timestamps: true,\n        freezeTableName: true,\n        allowNull: true,\n        classMethods: {\n            getChannelList(slackInfo) {\n                return new Promise((resolve, reject) => {\n                    console.log(slackInfo)\n                    let web = new WebClient(slackInfo.token)\n                    web.channels.list(function(err, res) {\n                        if (!err) {\n                            resolve(res.channels)\n                        } else {\n                            reject(\"Something happend Wrong\")\n                        }\n                    })\n                });\n            },\n            slackData() {\n                return new Promise((resolve, reject) => {\n                    let slackData = [];\n                    this.findAll().then((response) => {\n                        if (response.length) {\n                            findChannel(response, function(slackAccount) {\n                                resolve(slackAccount)\n                            })\n                        } else {\n                            resolve(response)\n                        }\n                    })\n\n                    function findChannel(slackAccounts, callback) {\n                        let account = slackAccounts.splice(0, 1)[0]\n                        let web = new WebClient(account.token)\n                        web.channels.list(function(err, res) {\n                            if (!err) {\n                                slackData.push({ id: account.id, teamName: account.teamName, token: account.token, selected_channel: account.selected_channel, status: account.status, channel_list: res.channels })\n                            } else {\n                                console.log(err)\n                                callback(\"Something happend Wrong\")\n                            }\n                            if (slackAccounts.length) {\n                                findChannel(slackAccounts, callback)\n                            } else {\n                                callback(slackData)\n                            }\n                        })\n                    }\n                });\n            }\n        }\n    });\n    return Slack;\n}"]}