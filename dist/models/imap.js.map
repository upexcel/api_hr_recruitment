{"version":3,"sources":["../../src/models/imap.js"],"names":["sequelize","DataTypes","imap","define","email","type","STRING","unique","password","imap_server","defaultValue","server_port","INTEGER","ENUM","values","status","BOOLEAN","active","total_emails","last_fetched_time","DATE","Date","allowNull","days_left_to_fetched","fetched_date_till","timestamps","freezeTableName","hooks","beforeCreate","IMAP","Promise","resolve","reject","findOne","where","then","classMethods","imapTest","result","user","host","port","tls","imapConnection","response","update","data","message","Error","catch","error","getCounts","tag","dataValues","imapCredential","connection","date","utc","format","stillUtc","toDate","local","search","err","results","length"],"mappings":"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","file":"imap.js","sourcesContent":["import imap_connection from \"../service/imap\";\nimport Imap from \"imap\";\nimport moment from \"moment\";\nexport default function(sequelize, DataTypes) {\n    const imap = sequelize.define(\"IMAP\", {\n        email: {\n            type: DataTypes.STRING(255),\n            unique: false,\n        },\n        password: DataTypes.STRING,\n        imap_server: {\n            type: DataTypes.STRING,\n            defaultValue: \"imap.gmail.com\"\n        },\n        server_port: {\n            type: DataTypes.INTEGER,\n            defaultValue: 993\n        },\n        type: {\n            type: DataTypes.ENUM,\n            values: [\"SSL\", \"TLS\"],\n            defaultValue: \"TLS\"\n        },\n        status: {\n            type: DataTypes.BOOLEAN,\n            defaultValue: false,\n        },\n        active: {\n            type: DataTypes.BOOLEAN,\n            defaultValue: false,\n        },\n        total_emails: {\n            type: DataTypes.INTEGER,\n            defaultValue: 0,\n        },\n        last_fetched_time: {\n            type: DataTypes.DATE,\n            defaultValue: new Date(),\n            allowNull: false\n        },\n        days_left_to_fetched:{\n            type:DataTypes.INTEGER,\n            allowNull:true\n        },\n        fetched_date_till:{\n            type:DataTypes.DATE,\n            allowNull:true\n        }\n    }, {\n        timestamps: true,\n        freezeTableName: true,\n        allowNull: true,\n        hooks: {\n            beforeCreate: function(IMAP) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({ where: { email: IMAP.email } })\n                        .then((email) => {\n                            if (email) {\n                                reject(\"Email Already In Use\");\n                            } else {\n                                resolve();\n                            }\n                        });\n                });\n            }\n        },\n        classMethods: {\n\n            // imap test.....\n            imapTest(email) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({ where: { email: email } })\n                        .then((result) => {\n                            if (result && result.active == false) {\n                                const imap = new Imap({\n                                    user: result.email,\n                                    password: result.password,\n                                    host: result.imap_server,\n                                    port: result.server_port,\n                                    tls: result.type\n                                });\n                                imap_connection.imapConnection(imap)\n                                    .then((response) => {\n                                        if (response) {\n                                            this.update({ active: true }, { where: { email: result.email } })\n                                                .then((data) => {\n                                                    if (data[0] == 1) {\n                                                        resolve({ message: \"Imap Activated Successfully\" });\n                                                    } else if (data[0] == 0) {\n                                                        reject(new Error(\"User Not Found In Database\"));\n                                                    } else {\n                                                        reject(new Error(\"error\"));\n                                                    }\n                                                })\n                                        } else {\n                                            reject(new Error(\"error\"));\n                                        }\n                                    })\n                                    .catch((error) => { reject(\"Invalid Details Can Not Activated\") });\n                            } else if (result && result.active == true) {\n                                this.update({ active: false }, { where: { email: result.email } })\n                                    .then((data) => {\n                                        if (data[0] == 1) {\n                                            resolve({ message: \"Imap Inactivated Successfully\" });\n                                        } else if (data[0] == 0) {\n                                            reject(new Error(\"User Not Found In Database\"));\n                                        } else {\n                                            reject(new Error(\"error\"));\n                                        }\n                                    })\n                            } else {\n                                if (!result) {\n                                    reject(new Error(\"EmailId Not found\"));\n                                } else {\n                                    resolve({ message: \"Email Already set to True\" })\n                                }\n\n                            }\n                        })\n                })\n            },\n\n            getCounts(tag, dataValues) {\n                return new Promise((resolve, reject) => {\n                    imap_connection.imapCredential(tag)\n                        .then((imap) => {\n                            imap_connection.imapConnection(imap)\n                                .then((connection) => {\n                                    var date = moment.utc().format('YYYY-MM-DD HH:mm:ss');\n                                    var stillUtc = moment.utc(date).toDate();\n                                    var local = moment(stillUtc).local().format('YYYY-MM-DD HH:mm:ss');\n                                    imap.search([\"ALL\", [\"BEFORE\", local]], function(err, results) {\n                                        dataValues.total_emails = results.length;\n                                        resolve(dataValues)\n                                    })\n                                }, (err) => {\n                                    reject(err)\n                                })\n\n                        })\n                })\n            }\n        },\n\n    });\n    return imap;\n}"]}