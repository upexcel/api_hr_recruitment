{"version":3,"sources":["../../src/models/User.js"],"names":["sequelize","DataTypes","User","define","email","type","STRING","unique","password","user_type","ENUM","values","hooks","beforeCreate","USER","options","Promise","resolve","reject","findOne","where","then","user","Error","timestamps","freezeTableName","allowNull","classMethods","login","find","details","expiredIn","remember_me","token","sign","id","expiresIn","status","role","forgotPassword","new_password","new_pass","createHash","update","digest","docs","Smtp","smtp_data","sendMail","smtp","passwordMessage","text","response","message","catch","error","err","userFindAll","page","limit","findAll","$ne","offset","parseInt","order","data","userDelete","destroy","$and","messgae","logs","user_activity","exec","get","reverse","_"],"mappings":"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","file":"User.js","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport generatePassword from \"password-generator\";\nimport constant from \"../models/constant\";\nimport mail from \"../modules/mail\";\nimport crypto from \"crypto\";\nimport db from \"../db.js\";\nimport * as _ from \"lodash\";\n\nexport default function(sequelize, DataTypes) {\n    const User = sequelize.define(\"USER\", {\n        email: {\n            type: DataTypes.STRING(255),\n            unique: false,\n        },\n        password: DataTypes.STRING,\n        user_type: {\n            type: DataTypes.ENUM,\n            values: [\"Admin\", \"Guest\", \"HR\"]\n        }\n    }, {\n        hooks: {\n            beforeCreate: function(USER, options) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({\n                            where: {\n                                email: USER.email\n                            }\n                        })\n                        .then((user) => {\n                            if (user) {\n                                throw new Error(reject(\"Email Already In Use\"));\n                            } else {\n                                resolve()\n                            }\n                        })\n                })\n\n            }\n        },\n        timestamps: true,\n        freezeTableName: true,\n        allowNull: true,\n        classMethods: {\n\n            // login.....\n            login(user) {\n                return new Promise((resolve, reject) => {\n                    this.find({\n                            where: {\n                                email: user.email,\n                                password: user.password\n                            }\n                        })\n                        .then((details) => {\n                            if (details) {\n                                let expiredIn = 0;\n                                if (user.remember_me) {\n                                    expiredIn = 24 * 60 * 60 * 365;\n                                } else {\n                                    expiredIn = 60 * 60;\n                                }\n                                const token = jwt.sign({\n                                    token: details.id,\n                                }, \"secret_key\", {\n                                    expiresIn: expiredIn,\n                                });\n                                resolve({\n                                    status: 1,\n                                    token,\n                                    role: details.user_type\n                                });\n                            } else {\n                                reject(\"Invalid Login Details\");\n                            }\n                        });\n                });\n            },\n            forgotPassword(email) {\n                return new Promise((resolve, reject) => {\n                    var new_password = generatePassword();\n                    var new_pass = crypto.createHash(\"sha256\").update(new_password).digest(\"base64\");\n                    this.update({ password: new_pass }, { where: { email: email } })\n                        .then((docs) => {\n                            db.Smtp.findOne({ where: { status: true } })\n                                .then((smtp_data) => {\n                                    if (docs && docs[0]) {\n                                        new_password = `your new password is : ${new_password}`;\n                                        mail.sendMail(email, constant().smtp.passwordMessage, constant().smtp.text, smtp_data, new_password)\n                                            .then((response) => {\n                                                resolve({ message: \"If email exists, new password will be send to your email !!\" })\n                                            }).catch((error) => { reject(error) });\n                                    } else {\n                                        reject(\"update failed\");\n                                    }\n                                })\n                        }, (err) => { reject(err) })\n                })\n            },\n            userFindAll(user, page, limit) {\n                return new Promise((resolve, reject) => {\n                    this.findAll({\n                            where: { id: { $ne: user.id } },\n                            offset: (page - 1) * parseInt(limit),\n                            limit: parseInt(limit),\n                            order: '`id` DESC'\n                        })\n                        .then((data) => {\n                            resolve(data)\n                        }, (err) => { reject({ error: 1, message: err, data: [] }) })\n                })\n            },\n            userDelete(user, id) {\n                return new Promise((resolve, reject) => {\n                    this.destroy({ where: { id: id, $and: { id: { \"$ne\": user.id } } } })\n                        .then((response) => {\n                            resolve(response)\n                        })\n                        .catch((err) => { reject({ error: 1, messgae: \"User Not Found\" }) })\n                })\n            },\n            logs(user_activity, email) {\n                return new Promise((resolve, reject) => {\n                    user_activity.findOne({ email: email }).exec()\n                        .then((data) => {\n                            data.get('action').reverse()\n                            data.get('time').reverse()\n                            data.get('json').reverse()\n                            resolve([data])\n                        })\n                });\n            }\n        },\n    });\n    return User;\n}"]}