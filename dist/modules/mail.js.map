{"version":3,"sources":["../../src/modules/mail.js"],"names":["helper","require","mail","module","exports","sendMail","email","subject","text","from","html","automatic","Promise","resolve","reject","add_html_suffix_email_tracking","process","env","TRACKING_ID","CLIENT_ID","format","Instance","data","dataValues","mailer","createTransport","host","smtp_server","port","parseInt","server_port","auth","user","username","pass","password","domain_name","replace","name","unique_id","Math","random","toString","substr","to","template","replyTo","error","response","message","status","email_response","body","reply_to","close","sendUsingSendGrid","to_emails","sg","SMTP_PASS","request","emptyRequest","method","path","personalizations","send_at","floor","Date","getTime","content","type","value","API","console","log","sendScheduledMail","cc","app_hr_contact_email","bcc","admin_mail"],"mappings":"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","file":"mail.js","sourcesContent":["import nodemailer from \"nodemailer\";\nimport smtpTransport from \"nodemailer-smtp-transport\";\nimport config from \"../config\";\nimport emailExistence from \"email-existence\";\nimport constant from \"../models/constant\";\nimport moment from \"moment\";\nlet helper = require('sendgrid').mail;\n\nmodule.exports = {\n    sendMail: function(email, subject, text, from, html, automatic) {\n        return new Promise((resolve, reject) => {\n            html += constant().add_html_suffix_email_tracking + \"&tid=\" + process.env.TRACKING_ID || config.TRACKING_ID + \"&cid=\" + process.env.CLIENT_ID || config.CLIENT_ID + \"&t=event&ec=\" + subject + \"_  \" + moment().format(\"YYYY-MM-DD\") + \"&ea=open&el=\" + email + \"\\\"/>\";\n            if (!from.email)\n                from = (from.Instance || from.data) ? from.Instance.dataValues : from.dataValues;\n            let mailer = nodemailer.createTransport(smtpTransport({\n                host: from.smtp_server,\n                port: parseInt(from.server_port),\n                auth: {\n                    user: from.username,\n                    pass: from.password\n                }\n            }));\n            let domain_name = from.email.replace(/.*@/, \"\");\n            let name = from.email.replace(/@[^@]+$/, '');\n            let unique_id = name + `+${Math.random().toString(36).substr(2, 9)}@` + domain_name;\n\n            mailer.sendMail({\n                from: from.email,\n                to: email,\n                subject: subject,\n                template: text || \"\",\n                html: html,\n                replyTo: automatic ? unique_id: from.email\n            }, (error, response) => {\n                if (error) {\n                    reject(\"Invalid Smtp Information\");\n                } else {\n                    resolve({ message: \"messsage send successfully\", status: 1, email_response: response, subject: subject, body: html, reply_to: unique_id});\n                }\n                mailer.close();\n            });\n        })\n    },\n\n    sendUsingSendGrid: function(to_emails, subject, html, from, body) {\n        return new Promise((resolve, reject) => {\n            let sg = require('sendgrid')(config.SMTP_PASS);\n            let request = sg.emptyRequest({\n                method: 'POST',\n                path: '/v3/mail/send',\n                body: {\n                    personalizations: [{\n                        to: to_emails,\n                        subject: subject\n                    }],\n                    send_at: Math.floor((new Date().getTime() / 1000) + 60),\n                    from: {\n                        email: from\n                    },\n                    content: [{\n                        type: 'text/plain',\n                        value: body\n                    }],\n                }\n            });\n\n            sg.API(request, function(error, response) {\n                if (error) {\n                    console.log('Error response received');\n                }\n                resolve({ message: \"messsage send successfully\", status: 1 });\n            });\n        })\n    },\n    \n    sendScheduledMail: function(email, subject, text, from, html) {\n        return new Promise((resolve, reject) => {\n            html += constant().add_html_suffix_email_tracking + \"&tid=\" + process.env.TRACKING_ID || config.TRACKING_ID + \"&cid=\" + process.env.CLIENT_ID || config.CLIENT_ID + \"&t=event&ec=\" + subject + \"_  \" + moment().format(\"YYYY-MM-DD\") + \"&ea=open&el=\" + email + \"\\\"/>\";\n            console.log(html)\n            if (!from.email)\n                from = (from.Instance || from.data) ? from.Instance.dataValues : from.dataValues;\n            let mailer = nodemailer.createTransport(smtpTransport({\n                host: from.smtp_server,\n                port: parseInt(from.server_port),\n                auth: {\n                    user: from.username,\n                    pass: from.password\n                }\n            }));\n            mailer.sendMail({\n                from: from.email,\n                to: email,\n                subject: subject,\n                template: text || \"\",\n                html: html,\n                cc: constant().app_hr_contact_email,\n                bcc: constant().admin_mail\n            }, (error, response) => {\n                if (error) {\n                    reject(\"Invalid Smtp Information\");\n                } else {\n                    resolve({ message: \"messsage send successfully\", status: 1, email_response: response, subject: subject, body: html });\n                }\n                mailer.close();\n            });\n        })\n    }\n};"]}