{"version":3,"sources":["../../src/modules/readAttachment.js"],"names":["mime","require","replaceExt","OAuth2","auth","oauth2Client","CLIENT_ID","CLIENT_SECRET","REDIRECT_URL","setCredentials","access_token","token_type","expires_in","refresh_token","drive","version","filepath","attach","self","module","exports","read","imap","uid","Promise","resolve","reject","openInbox","cb","openBox","once","console","log","a_attachments","a_attrs","f","fetch","bodies","struct","on","msg","seqno","prefix","attrs","attachments","findAttachmentParts","err","saveData","flag","flags","length","attachment","splice","partID","seq","stream","filename","disposition","params","encoding","join","__dirname","filesave","then","data","connect","len","i","Array","isArray","indexOf","type","push","writeStream","createWriteStream","readFile","pipe","decode"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIA,OAAOC,QAAQ,YAAR,CAAX;AACA,IAAIC,aAAaD,QAAQ,aAAR,CAAjB;;AAEA,IAAIE,SAAS,qBAAOC,IAAP,CAAYD,MAAzB;AACA,IAAIE,eAAe,IAAIF,MAAJ,CAAW,iBAAOG,SAAlB,EAA6B,iBAAOC,aAApC,EAAmD,iBAAOC,YAA1D,CAAnB;AACAH,aAAaI,cAAb,CAA4B;AACxBC,kBAAc,iBAAOA,YADG;AAExBC,gBAAY,iBAAOA,UAFK;AAGxBC,gBAAY,iBAAOA,UAHK;AAIxBC,mBAAe,iBAAOA;AAJE,CAA5B;AAMA,IAAIC,QAAQ,qBAAOA,KAAP,CAAa;AACrBC,aAAS,IADY;AAErBX,UAAMC;AAFe,CAAb,CAAZ;AAIA,IAAIW,WAAW,EAAf;AACA,IAAIC,SAAS,EAAb;AACA,IAAIC,OAAOC,OAAOC,OAAP,GAAiB;AACxBC,UAAM,cAASC,IAAT,EAAeC,GAAf,EAAoB;AACtB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCT,qBAAS,EAAT;;AAEA,qBAASU,SAAT,CAAmBC,EAAnB,EAAuB;AACnBN,qBAAKO,OAAL,CAAa,OAAb,EAAsB,IAAtB,EAA4BD,EAA5B;AACH;AACDN,iBAAKQ,IAAL,CAAU,OAAV,EAAmB,YAAW;AAC1BC,wBAAQC,GAAR,CAAY,oCAAZ;AACAL,0BAAU,YAAW;AACjB,wBAAIM,gBAAgB,EAApB;AACA,wBAAIC,UAAU,EAAd;AACA,wBAAIC,IAAIb,KAAKc,KAAL,CAAWb,GAAX,EAAgB;AACpBc,gCAAQ,CAAC,6CAAD,EAAgD,MAAhD,CADY;AAEpBC,gCAAQ;AAFY,qBAAhB,CAAR;AAIAH,sBAAEI,EAAF,CAAK,SAAL,EAAgB,UAASC,GAAT,EAAcC,KAAd,EAAqB;AACjC,4BAAIC,SAAS,OAAOD,KAAP,GAAe,IAA5B;AACAD,4BAAIV,IAAJ,CAAS,YAAT,EAAuB,UAASa,KAAT,EAAgB;AACnC,gCAAMC,cAAc1B,KAAK2B,mBAAL,CAAyBF,MAAML,MAA/B,CAApB;AACAL,4CAAgBW,WAAhB;AACAV,sCAAUS,KAAV;AACH,yBAJD;AAKAH,4BAAIV,IAAJ,CAAS,KAAT,EAAgB,YAAW;AACvBC,oCAAQC,GAAR,CAAY,UAAZ;AACH,yBAFD;AAGH,qBAVD;AAWAG,sBAAEL,IAAF,CAAO,OAAP,EAAgB,UAACgB,GAAD,EAAS;AACrBpB,+BAAO,kBAAkBoB,GAAzB;AACH,qBAFD;;AAIA,6BAASC,QAAT,CAAkBzB,IAAlB,EAAwBsB,WAAxB,EAAqCD,KAArC,EAA4C;AACxC,4BAAIpB,MAAMoB,MAAMpB,GAAhB;AACA,4BAAIyB,OAAOL,MAAMM,KAAjB;AACA,4BAAIC,SAASN,YAAYM,MAAzB;AACA,4BAAIN,YAAY,CAAZ,KAAkB,IAAtB,EAA4B;AACxBnB,oCAAQR,MAAR;AACH,yBAFD,MAEO;AACH,gCAAIkC,aAAaP,YAAYQ,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB,CAAjB;AACA,gCAAIjB,IAAIb,KAAKc,KAAL,CAAWO,MAAMpB,GAAjB,EAAsB;AAC1Bc,wCAAQ,CAACc,WAAW,CAAX,EAAcE,MAAf,CADkB;AAE1Bf,wCAAQ;AAFkB,6BAAtB,CAAR;AAIAH,8BAAEI,EAAF,CAAK,SAAL,EAAgB,UAACC,GAAD,EAAMc,GAAN,EAAc;AAC1Bd,oCAAID,EAAJ,CAAO,MAAP,EAAe,UAASgB,MAAT,EAAiB;AAC5B,wCAAIC,WAAWL,WAAW,CAAX,EAAcM,WAAd,CAA0BC,MAA1B,CAAiCF,QAAhD;AACA,wCAAIG,WAAWR,WAAW,CAAX,EAAcQ,QAA7B;AACA3C,+CAAW,eAAK4C,IAAL,CAAUC,SAAV,EAAqB,WAArB,EAAkCL,QAAlC,CAAX;AACAtC,yCAAK4C,QAAL,CAAcP,MAAd,EAAsBvC,QAAtB,EAAgCwC,QAAhC,EAA0CG,QAA1C,EACKI,IADL,CACU,UAACC,IAAD,EAAU,CAEf,CAHL;AAIH,iCARD;AASH,6BAVD;AAWH;AACJ;AACD7B,sBAAEL,IAAF,CAAO,KAAP,EAAc,YAAM;AAChBiB,iCAASzB,IAAT,EAAeW,aAAf,EAA8BC,OAA9B;AACH,qBAFD;AAGH,iBAlDD;AAmDH,aArDD;AAsDAZ,iBAAKQ,IAAL,CAAU,OAAV,EAAmB,UAACgB,GAAD,EAAS;AACxBf,wBAAQC,GAAR,CAAYc,GAAZ;AACApB,uBAAOoB,GAAP;AACH,aAHD;AAIAxB,iBAAKQ,IAAL,CAAU,KAAV,EAAiB,YAAM;AACnBC,wBAAQC,GAAR,CAAY,kBAAZ;AACH,aAFD;AAGAV,iBAAK2C,OAAL;AACH,SApEM,CAAP;AAsEH,KAxEuB;;AA0ExBpB,yBAAqB,6BAASP,MAAT,EAAiBM,WAAjB,EAA8B;AAC/CA,sBAAcA,eAAe,EAA7B;AACA,YAAIsB,MAAM5B,OAAOY,MAAjB;AACA,aAAK,IAAIiB,IAAI,CAAb,EAAgBA,IAAID,GAApB,EAAyB,EAAEC,CAA3B,EAA8B;AAC1B,gBAAIC,MAAMC,OAAN,CAAc/B,OAAO6B,CAAP,CAAd,CAAJ,EAA8B;AAC1BjD,qBAAK2B,mBAAL,CAAyBP,OAAO6B,CAAP,CAAzB,EAAoCvB,WAApC;AACH,aAFD,MAEO,IAAIN,OAAO6B,CAAP,EAAUV,WAAV,IAAyB,CAAC,QAAD,EAAW,YAAX,EAAyBa,OAAzB,CAAiChC,OAAO6B,CAAP,EAAUV,WAAV,CAAsBc,IAAvD,IAA+D,CAA5F,EAA+F;AAClG3B,4BAAY4B,IAAZ,CAAiBlC,OAAO6B,CAAP,CAAjB;AACH;AACJ;AACD,eAAOvB,WAAP;AACH,KArFuB;AAsFxBkB,cAAU,kBAASP,MAAT,EAAiBvC,QAAjB,EAA2BwC,QAA3B,EAAqCG,QAArC,EAA+C;AACrD,eAAO,IAAInC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAI+C,cAAc,aAAGC,iBAAH,CAAqB1D,QAArB,CAAlB;AACAyD,wBAAYlC,EAAZ,CAAe,QAAf,EAAyB,YAAW;AAChC,6BAAGoC,QAAH,CAAYnB,QAAZ,EAAsB;AAClBG,8BAAUA;AADQ,iBAAtB,EAEG,YAAW;AACVlC;AACH,iBAJD;AAKH,aAND;AAOA,gBAAIkC,aAAa,QAAjB,EAA2B;AACvBJ,uBAAOqB,IAAP,CAAY,uBAAOC,MAAP,EAAZ,EAA6BD,IAA7B,CAAkCH,WAAlC;AACH,aAFD,MAEO;AACHlB,uBAAOqB,IAAP,CAAYH,WAAZ;AACH;AACJ,SAdM,CAAP;AAeH;AAtGuB,CAA5B","file":"readAttachment.js","sourcesContent":["import db from \"../db\"\nimport path from \"path\";\nimport fs from \"fs\";\nimport base64 from \"base64-stream\";\nimport config from \"../config.json\";\nimport google from \"googleapis\";\nimport googleDrive from 'google-drive'\nvar mime = require('mime-types');\nvar replaceExt = require('replace-ext');\n\nvar OAuth2 = google.auth.OAuth2;\nvar oauth2Client = new OAuth2(config.CLIENT_ID, config.CLIENT_SECRET, config.REDIRECT_URL);\noauth2Client.setCredentials({\n    access_token: config.access_token,\n    token_type: config.token_type,\n    expires_in: config.expires_in,\n    refresh_token: config.refresh_token\n});\nvar drive = google.drive({\n    version: \"v2\",\n    auth: oauth2Client\n});\nvar filepath = \"\";\nvar attach = [];\nvar self = module.exports = {\n    read: function(imap, uid) {\n        return new Promise((resolve, reject) => {\n            attach = [];\n\n            function openInbox(cb) {\n                imap.openBox(\"INBOX\", true, cb);\n            }\n            imap.once(\"ready\", function() {\n                console.log(\"==================================\")\n                openInbox(function() {\n                    let a_attachments = '';\n                    let a_attrs = ''\n                    var f = imap.fetch(uid, {\n                        bodies: [\"HEADER.FIELDS (FROM TO SUBJECT BCC CC DATE)\", \"TEXT\"],\n                        struct: true\n                    });\n                    f.on(\"message\", function(msg, seqno) {\n                        var prefix = \"(#\" + seqno + \") \";\n                        msg.once(\"attributes\", function(attrs) {\n                            const attachments = self.findAttachmentParts(attrs.struct);\n                            a_attachments = attachments;\n                            a_attrs = attrs;\n                        });\n                        msg.once(\"end\", function() {\n                            console.log(\"Finished\");\n                        });\n                    });\n                    f.once(\"error\", (err) => {\n                        reject(\"Fetch error: \" + err);\n                    });\n\n                    function saveData(imap, attachments, attrs) {\n                        var uid = attrs.uid;\n                        var flag = attrs.flags;\n                        var length = attachments.length\n                        if (attachments[0] == null) {\n                            resolve(attach)\n                        } else {\n                            var attachment = attachments.splice(0, 1);\n                            var f = imap.fetch(attrs.uid, {\n                                bodies: [attachment[0].partID],\n                                struct: true\n                            });\n                            f.on('message', (msg, seq) => {\n                                msg.on(\"body\", function(stream) {\n                                    var filename = attachment[0].disposition.params.filename;\n                                    var encoding = attachment[0].encoding;\n                                    filepath = path.join(__dirname, \"/uploads/\", filename);\n                                    self.filesave(stream, filepath, filename, encoding)\n                                        .then((data) => {\n\n                                        })\n                                })\n                            })\n                        }\n                    }\n                    f.once(\"end\", () => {\n                        saveData(imap, a_attachments, a_attrs)\n                    });\n                });\n            });\n            imap.once(\"error\", (err) => {\n                console.log(err)\n                reject(err);\n            });\n            imap.once(\"end\", () => {\n                console.log(\"Connection ended\");\n            });\n            imap.connect();\n        })\n\n    },\n\n    findAttachmentParts: function(struct, attachments) {\n        attachments = attachments || [];\n        var len = struct.length;\n        for (var i = 0; i < len; ++i) {\n            if (Array.isArray(struct[i])) {\n                self.findAttachmentParts(struct[i], attachments);\n            } else if (struct[i].disposition && [\"INLINE\", \"ATTACHMENT\"].indexOf(struct[i].disposition.type) > 0) {\n                attachments.push(struct[i]);\n            }\n        }\n        return attachments;\n    },\n    filesave: function(stream, filepath, filename, encoding) {\n        return new Promise((resolve, reject) => {\n            var writeStream = fs.createWriteStream(filepath);\n            writeStream.on(\"finish\", function() {\n                fs.readFile(filename, {\n                    encoding: encoding\n                }, function() {\n                    resolve(fs);\n                });\n            });\n            if (encoding === \"BASE64\") {\n                stream.pipe(base64.decode()).pipe(writeStream);\n            } else {\n                stream.pipe(writeStream);\n            }\n        })\n    }\n}\n"]}