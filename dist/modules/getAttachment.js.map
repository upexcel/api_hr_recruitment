{"version":3,"sources":["../../src/modules/getAttachment.js"],"names":["mime","require","replaceExt","OAuth2","auth","oauth2Client","process","env","CLIENT_ID","CLIENT_SECRET","REDIRECT_URL","setCredentials","access_token","token_type","expiry_date","refresh_token","err","console","log","drive","version","filepath","attach","self","module","exports","getAttachment","imap","uid","Promise","resolve","reject","openInbox","cb","openBox","once","a_attachments","a_attrs","f","fetch","bodies","struct","on","msg","seqno","prefix","attrs","attachments","findAttachmentParts","saveData","flag","flags","length","attachment","splice","partID","seq","stream","filename","disposition","params","encoding","myDir","__dirname","existsSync","mkdirSync","join","filesave","then","data","extname","rename","driveUpload","push","catch","connect","len","i","Array","isArray","indexOf","type","writeStream","createWriteStream","readFile","pipe","decode","folderId","folderid","result","req","files","create","resource","parents","mimeType","lookup","media","body","fields","attachment_file","name","link","id","unlink"],"mappings":"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","file":"getAttachment.js","sourcesContent":["import db from \"../db\"\nimport path from \"path\";\nimport fs from \"fs\";\nimport base64 from \"base64-stream\";\nimport config from \"../config\";\nimport google from \"googleapis\";\nimport googleDrive from 'google-drive'\nvar mime = require('mime-types');\n\nvar replaceExt = require('replace-ext');\n\nvar OAuth2 = google.auth.OAuth2;\nvar oauth2Client = new OAuth2(process.env.CLIENT_ID || config.CLIENT_ID, process.env.CLIENT_SECRET || config.CLIENT_SECRET, process.env.REDIRECT_URL || config.REDIRECT_URL);\n\noauth2Client.setCredentials({\n    access_token: process.env.access_token || config.access_token,\n    token_type: process.env.token_type || config.token_type,\n    expiry_date: process.env.expiry_date || config.expiry_date,\n    refresh_token: process.env.refresh_token || config.refresh_token\n}, (err) => { console.log(err) });\nvar drive = google.drive({\n    version: \"v2\",\n    auth: oauth2Client\n});\nvar filepath = \"\";\nvar attach = [];\nvar self = module.exports = {\n    getAttachment: function(imap, uid) {\n        return new Promise((resolve, reject) => {\n            attach = [];\n\n            function openInbox(cb) {\n                imap.openBox(\"INBOX\", true, cb);\n            }\n            imap.once(\"ready\", function() {\n                openInbox(function() {\n                    let a_attachments = '';\n                    let a_attrs = ''\n                    var f = imap.fetch(uid, {\n                        bodies: [\"HEADER.FIELDS (FROM TO SUBJECT BCC CC DATE)\", \"TEXT\"],\n                        struct: true\n                    });\n                    f.on(\"message\", function(msg, seqno) {\n                        var prefix = \"(#\" + seqno + \") \";\n                        msg.once(\"attributes\", function(attrs) {\n                            const attachments = self.findAttachmentParts(attrs.struct);\n                            a_attachments = attachments;\n                            a_attrs = attrs;\n                        });\n                        msg.once(\"end\", function() {\n                            console.log(\"Finished\");\n                        });\n                    });\n                    f.once(\"error\", (err) => {\n                        reject(\"Fetch error: \" + err);\n                    });\n\n                    function saveData(imap, attachments, attrs) {\n                        var uid = attrs.uid;\n                        var flag = attrs.flags;\n                        var length = attachments.length\n                        if (attachments[0] == null) {\n                            resolve(attach)\n                        } else {\n                            var attachment = attachments.splice(0, 1);\n                            var f = imap.fetch(attrs.uid, {\n                                bodies: [attachment[0].partID],\n                                struct: true\n                            });\n                            f.on('message', (msg, seq) => {\n                                msg.on(\"body\", function(stream) {\n                                    var filename = attachment[0].disposition.params.filename;\n                                    var encoding = attachment[0].encoding;\n                                    var myDir = __dirname + \"/uploads\";\n                                    if (!fs.existsSync(myDir)) {\n                                        fs.mkdirSync(myDir);\n                                    }\n                                    filepath = path.join(__dirname, \"/uploads/\", filename);\n                                    self.filesave(stream, filepath, filename, encoding)\n                                        .then((data) => {\n                                            if (path.extname(filepath) == \".docx\") {\n                                                fs.rename(filepath, replaceExt(filepath, '.doc'), function(err) {\n                                                    if (err) console.log('ERROR: ' + err);\n                                                    filepath = replaceExt(filepath, '.doc');\n                                                    filename = replaceExt(filename, '.doc');\n                                                    self.driveUpload(filepath, filename)\n                                                        .then((data) => {\n                                                            attach.push(data)\n                                                            saveData(imap, attachments, attrs)\n                                                        })\n                                                        .catch((err) => { reject(err) })\n                                                })\n                                            } else {\n                                                self.driveUpload(filepath, filename)\n                                                    .then((data) => {\n                                                        attach.push(data)\n                                                        saveData(imap, attachments, attrs)\n                                                    })\n                                                    .catch((err) => { reject(err) })\n\n                                            }\n                                        })\n                                })\n                            })\n                        }\n                    }\n                    f.once(\"end\", () => {\n                        saveData(imap, a_attachments, a_attrs)\n                    });\n                });\n            });\n            imap.once(\"error\", (err) => {\n                reject(err);\n            });\n            imap.once(\"end\", () => {\n                console.log(\"Connection ended\");\n            });\n            imap.connect();\n        })\n\n    },\n\n    findAttachmentParts: function(struct, attachments) {\n        attachments = attachments || [];\n        var len = struct.length;\n        for (var i = 0; i < len; ++i) {\n            if (Array.isArray(struct[i])) {\n                self.findAttachmentParts(struct[i], attachments);\n            } else if (struct[i].disposition && [\"INLINE\", \"ATTACHMENT\"].indexOf(struct[i].disposition.type) > 0) {\n                attachments.push(struct[i]);\n            }\n        }\n        return attachments;\n    },\n    filesave: function(stream, filepath, filename, encoding) {\n        return new Promise((resolve, reject) => {\n            var writeStream = fs.createWriteStream(filepath);\n            writeStream.on(\"finish\", function() {\n                fs.readFile(filename, {\n                    encoding: encoding\n                }, function() {\n                    resolve(fs);\n                });\n            });\n            if (encoding === \"BASE64\") {\n                stream.pipe(base64.decode()).pipe(writeStream);\n            } else {\n                stream.pipe(writeStream);\n            }\n        })\n    },\n    driveUpload: function(filepath, filename) {\n        return new Promise((resolve, reject) => {\n            var folderId =process.env.folderid|| config.folderid;\n            var drive = google.drive({ version: 'v3', auth: oauth2Client });\n            fs.readFile(filepath, (err, result) => {\n                var req = drive.files.create({\n                    resource: {\n                        'name': filename,\n                        parents: [folderId],\n                        mimeType: mime.lookup(filepath)\n                    },\n                    media: {\n                        mimeType: mime.lookup(filepath),\n                        body: result\n                    },\n                    fields: 'id'\n                }, function(err, result) {\n                    if (err) {\n                        reject(err)\n                    } else {\n                        var attachment_file = {\n                            name: filename,\n                            link: \"https://drive.google.com/file/d/\" + result.id + \"/preview?usp=drivesdk\"\n                        }\n                        fs.unlink(filepath, function() {\n                            console.log(\"success\");\n                            resolve(attachment_file)\n                        });\n\n                    }\n                });\n            })\n        })\n    }\n}"]}